// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs.UndirectedGraph.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Adding edge(s), but not the vertices, to a undirected graph")]
    public partial class AddingEdgeSButNotTheVerticesToAUndirectedGraphFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddEdge.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Adding edge(s), but not the vertices, to a undirected graph", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges containing loop to a undirected graph who disallow loo" +
            "ps")]
        public virtual void AddAIEnumerableOfEdgesContainingLoopToAUndirectedGraphWhoDisallowLoops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges containing loop to a undirected graph who disallow loo" +
                    "ps", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property disallow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 19
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table3.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 20
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table3, "When ");
#line 23
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 24
 testRunner.And("he contains the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table5.AddRow(new string[] {
                        "v0",
                        "v1"});
            table5.AddRow(new string[] {
                        "v1",
                        "v4"});
            table5.AddRow(new string[] {
                        "v4",
                        "v3"});
            table5.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 31
 testRunner.And("he contains the edges", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges containing loop to a undirected graph who disallow loops")]
        public virtual void AddAArrayOfEdgesContainingLoopToAUndirectedGraphWhoDisallowLoops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges containing loop to a undirected graph who disallow loops", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("the property disallow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 41
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "v4",
                        "v3"});
            table7.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 48
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 54
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table8.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 55
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table8, "When ");
#line 58
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "v0"});
            table9.AddRow(new string[] {
                        "v1"});
            table9.AddRow(new string[] {
                        "v2"});
            table9.AddRow(new string[] {
                        "v3"});
            table9.AddRow(new string[] {
                        "v4"});
#line 59
 testRunner.And("he contains the vertices", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table10.AddRow(new string[] {
                        "v0",
                        "v1"});
            table10.AddRow(new string[] {
                        "v1",
                        "v4"});
            table10.AddRow(new string[] {
                        "v4",
                        "v3"});
            table10.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 66
 testRunner.And("he contains the edges", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a loop to a undirected graph who disallow loops")]
        public virtual void AddALoopToAUndirectedGraphWhoDisallowLoops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a loop to a undirected graph who disallow loops", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("the property disallow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 76
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 83
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 89
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table13.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 90
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table13, "When ");
#line 93
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 94
 testRunner.And("he contains the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table15.AddRow(new string[] {
                        "v0",
                        "v1"});
            table15.AddRow(new string[] {
                        "v1",
                        "v4"});
            table15.AddRow(new string[] {
                        "v4",
                        "v3"});
            table15.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 101
 testRunner.And("he contains the edges", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges containing a parallel edge to a undirected graph who d" +
            "isallow parallel edges")]
        public virtual void AddAIEnumerableOfEdgesContainingAParallelEdgeToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges containing a parallel edge to a undirected graph who d" +
                    "isallow parallel edges", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 109
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 111
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 118
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 123
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table18.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 124
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table18, "When ");
#line 127
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "v0"});
            table19.AddRow(new string[] {
                        "v1"});
            table19.AddRow(new string[] {
                        "v2"});
            table19.AddRow(new string[] {
                        "v3"});
            table19.AddRow(new string[] {
                        "v4"});
#line 128
 testRunner.And("he contains the vertices", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table20.AddRow(new string[] {
                        "v0",
                        "v1"});
            table20.AddRow(new string[] {
                        "v1",
                        "v4"});
            table20.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 135
 testRunner.And("he contains the edges", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges containing a parallel edge to a undirected graph who disallo" +
            "w parallel edges")]
        public virtual void AddAArrayOfEdgesContainingAParallelEdgeToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges containing a parallel edge to a undirected graph who disallo" +
                    "w parallel edges", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table21.AddRow(new string[] {
                        "v0"});
            table21.AddRow(new string[] {
                        "v1"});
            table21.AddRow(new string[] {
                        "v2"});
            table21.AddRow(new string[] {
                        "v3"});
            table21.AddRow(new string[] {
                        "v4"});
#line 144
 testRunner.And("the vertices", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table22.AddRow(new string[] {
                        "v0",
                        "v1"});
            table22.AddRow(new string[] {
                        "v1",
                        "v4"});
            table22.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 151
 testRunner.And("the edges", ((string)(null)), table22, "And ");
#line 156
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table23.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 157
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table23, "When ");
#line 160
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table24.AddRow(new string[] {
                        "v0"});
            table24.AddRow(new string[] {
                        "v1"});
            table24.AddRow(new string[] {
                        "v2"});
            table24.AddRow(new string[] {
                        "v3"});
            table24.AddRow(new string[] {
                        "v4"});
#line 161
 testRunner.And("he contains the vertices", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table25.AddRow(new string[] {
                        "v0",
                        "v1"});
            table25.AddRow(new string[] {
                        "v1",
                        "v4"});
            table25.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 168
 testRunner.And("he contains the edges", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges containing a loop to a undirected graph")]
        public virtual void AddAIEnumerableOfEdgesContainingALoopToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges containing a loop to a undirected graph", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table26.AddRow(new string[] {
                        "v0"});
            table26.AddRow(new string[] {
                        "v1"});
            table26.AddRow(new string[] {
                        "v2"});
            table26.AddRow(new string[] {
                        "v3"});
            table26.AddRow(new string[] {
                        "v4"});
#line 177
 testRunner.And("the vertices", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table27.AddRow(new string[] {
                        "v0",
                        "v1"});
            table27.AddRow(new string[] {
                        "v1",
                        "v4"});
            table27.AddRow(new string[] {
                        "v4",
                        "v3"});
            table27.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 184
 testRunner.And("the edges", ((string)(null)), table27, "And ");
#line 190
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table28.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 191
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table28, "When ");
#line 194
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table29.AddRow(new string[] {
                        "v0"});
            table29.AddRow(new string[] {
                        "v1"});
            table29.AddRow(new string[] {
                        "v2"});
            table29.AddRow(new string[] {
                        "v3"});
            table29.AddRow(new string[] {
                        "v4"});
#line 195
 testRunner.And("he contains the vertices", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table30.AddRow(new string[] {
                        "v0",
                        "v1"});
            table30.AddRow(new string[] {
                        "v1",
                        "v4"});
            table30.AddRow(new string[] {
                        "v4",
                        "v3"});
            table30.AddRow(new string[] {
                        "v3",
                        "v4"});
            table30.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 202
 testRunner.And("he contains the edges", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges containing a loop to a undirected graph")]
        public virtual void AddAArrayOfEdgesContainingALoopToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges containing a loop to a undirected graph", ((string[])(null)));
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table31.AddRow(new string[] {
                        "v0"});
            table31.AddRow(new string[] {
                        "v1"});
            table31.AddRow(new string[] {
                        "v2"});
            table31.AddRow(new string[] {
                        "v3"});
            table31.AddRow(new string[] {
                        "v4"});
#line 213
 testRunner.And("the vertices", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table32.AddRow(new string[] {
                        "v0",
                        "v1"});
            table32.AddRow(new string[] {
                        "v1",
                        "v4"});
            table32.AddRow(new string[] {
                        "v4",
                        "v3"});
            table32.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 220
 testRunner.And("the edges", ((string)(null)), table32, "And ");
#line 226
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table33.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 227
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table33, "When ");
#line 230
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table34.AddRow(new string[] {
                        "v0"});
            table34.AddRow(new string[] {
                        "v1"});
            table34.AddRow(new string[] {
                        "v2"});
            table34.AddRow(new string[] {
                        "v3"});
            table34.AddRow(new string[] {
                        "v4"});
#line 231
 testRunner.And("he contains the vertices", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table35.AddRow(new string[] {
                        "v0",
                        "v1"});
            table35.AddRow(new string[] {
                        "v1",
                        "v4"});
            table35.AddRow(new string[] {
                        "v4",
                        "v3"});
            table35.AddRow(new string[] {
                        "v3",
                        "v4"});
            table35.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 238
 testRunner.And("he contains the edges", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges containing a parallel edge to a undirected graph")]
        public virtual void AddAIEnumerableOfEdgesContainingAParallelEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges containing a parallel edge to a undirected graph", ((string[])(null)));
#line 246
this.ScenarioSetup(scenarioInfo);
#line 247
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table36.AddRow(new string[] {
                        "v0"});
            table36.AddRow(new string[] {
                        "v1"});
            table36.AddRow(new string[] {
                        "v2"});
            table36.AddRow(new string[] {
                        "v3"});
            table36.AddRow(new string[] {
                        "v4"});
#line 249
 testRunner.And("the vertices", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table37.AddRow(new string[] {
                        "v0",
                        "v1"});
            table37.AddRow(new string[] {
                        "v1",
                        "v4"});
            table37.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 256
 testRunner.And("the edges", ((string)(null)), table37, "And ");
#line 261
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table38.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 262
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table38, "When ");
#line 265
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table39.AddRow(new string[] {
                        "v0"});
            table39.AddRow(new string[] {
                        "v1"});
            table39.AddRow(new string[] {
                        "v2"});
            table39.AddRow(new string[] {
                        "v3"});
            table39.AddRow(new string[] {
                        "v4"});
#line 266
 testRunner.And("he contains the vertices", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table40.AddRow(new string[] {
                        "v0",
                        "v1"});
            table40.AddRow(new string[] {
                        "v1",
                        "v4"});
            table40.AddRow(new string[] {
                        "v4",
                        "v3"});
            table40.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 273
 testRunner.And("he contains the edges", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges containing a parallel edge to a undirected graph")]
        public virtual void AddAArrayOfEdgesContainingAParallelEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges containing a parallel edge to a undirected graph", ((string[])(null)));
#line 280
this.ScenarioSetup(scenarioInfo);
#line 281
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 282
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table41.AddRow(new string[] {
                        "v0"});
            table41.AddRow(new string[] {
                        "v1"});
            table41.AddRow(new string[] {
                        "v2"});
            table41.AddRow(new string[] {
                        "v3"});
            table41.AddRow(new string[] {
                        "v4"});
#line 283
 testRunner.And("the vertices", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table42.AddRow(new string[] {
                        "v0",
                        "v1"});
            table42.AddRow(new string[] {
                        "v1",
                        "v4"});
            table42.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 290
 testRunner.And("the edges", ((string)(null)), table42, "And ");
#line 295
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table43.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 296
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table43, "When ");
#line 299
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table44.AddRow(new string[] {
                        "v0"});
            table44.AddRow(new string[] {
                        "v1"});
            table44.AddRow(new string[] {
                        "v2"});
            table44.AddRow(new string[] {
                        "v3"});
            table44.AddRow(new string[] {
                        "v4"});
#line 300
 testRunner.And("he contains the vertices", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table45.AddRow(new string[] {
                        "v0",
                        "v1"});
            table45.AddRow(new string[] {
                        "v1",
                        "v4"});
            table45.AddRow(new string[] {
                        "v4",
                        "v3"});
            table45.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 307
 testRunner.And("he contains the edges", ((string)(null)), table45, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an edge to a undirected graph who allow parallel edges")]
        public virtual void AddAnEdgeToAUndirectedGraphWhoAllowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an edge to a undirected graph who allow parallel edges", ((string[])(null)));
#line 314
this.ScenarioSetup(scenarioInfo);
#line 315
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table46.AddRow(new string[] {
                        "v0"});
            table46.AddRow(new string[] {
                        "v1"});
            table46.AddRow(new string[] {
                        "v2"});
            table46.AddRow(new string[] {
                        "v3"});
            table46.AddRow(new string[] {
                        "v4"});
#line 317
 testRunner.And("the vertices", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table47.AddRow(new string[] {
                        "v0",
                        "v1"});
            table47.AddRow(new string[] {
                        "v1",
                        "v4"});
            table47.AddRow(new string[] {
                        "v4",
                        "v3"});
            table47.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 324
 testRunner.And("the edges", ((string)(null)), table47, "And ");
#line 330
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table48.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 331
 testRunner.When("I add the edge to the undirected graph", ((string)(null)), table48, "When ");
#line 334
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table49.AddRow(new string[] {
                        "v0"});
            table49.AddRow(new string[] {
                        "v1"});
            table49.AddRow(new string[] {
                        "v2"});
            table49.AddRow(new string[] {
                        "v3"});
            table49.AddRow(new string[] {
                        "v4"});
#line 335
 testRunner.And("he contains the vertices", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table50.AddRow(new string[] {
                        "v0",
                        "v1"});
            table50.AddRow(new string[] {
                        "v1",
                        "v4"});
            table50.AddRow(new string[] {
                        "v4",
                        "v3"});
            table50.AddRow(new string[] {
                        "v3",
                        "v4"});
            table50.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 342
 testRunner.And("he contains the edges", ((string)(null)), table50, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an edge to a undirected graph who disallow parallel edges")]
        public virtual void AddAnEdgeToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an edge to a undirected graph who disallow parallel edges", ((string[])(null)));
#line 350
this.ScenarioSetup(scenarioInfo);
#line 351
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 352
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table51.AddRow(new string[] {
                        "v0"});
            table51.AddRow(new string[] {
                        "v1"});
            table51.AddRow(new string[] {
                        "v2"});
            table51.AddRow(new string[] {
                        "v3"});
            table51.AddRow(new string[] {
                        "v4"});
#line 353
 testRunner.And("the vertices", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table52.AddRow(new string[] {
                        "v0",
                        "v1"});
            table52.AddRow(new string[] {
                        "v1",
                        "v4"});
            table52.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 360
 testRunner.And("the edges", ((string)(null)), table52, "And ");
#line 365
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table53.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 366
 testRunner.When("I add the edge to the undirected graph", ((string)(null)), table53, "When ");
#line 369
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table54.AddRow(new string[] {
                        "v0"});
            table54.AddRow(new string[] {
                        "v1"});
            table54.AddRow(new string[] {
                        "v2"});
            table54.AddRow(new string[] {
                        "v3"});
            table54.AddRow(new string[] {
                        "v4"});
#line 370
 testRunner.And("he contains the vertices", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table55.AddRow(new string[] {
                        "v0",
                        "v1"});
            table55.AddRow(new string[] {
                        "v1",
                        "v4"});
            table55.AddRow(new string[] {
                        "v4",
                        "v3"});
            table55.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 377
 testRunner.And("he contains the edges", ((string)(null)), table55, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges to a undirected graph who allow parallel edges")]
        public virtual void AddAIEnumerableOfEdgesToAUndirectedGraphWhoAllowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges to a undirected graph who allow parallel edges", ((string[])(null)));
#line 384
this.ScenarioSetup(scenarioInfo);
#line 385
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 386
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table56.AddRow(new string[] {
                        "v0"});
            table56.AddRow(new string[] {
                        "v1"});
            table56.AddRow(new string[] {
                        "v2"});
            table56.AddRow(new string[] {
                        "v3"});
            table56.AddRow(new string[] {
                        "v4"});
#line 387
 testRunner.And("the vertices", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table57.AddRow(new string[] {
                        "v0",
                        "v1"});
            table57.AddRow(new string[] {
                        "v1",
                        "v4"});
            table57.AddRow(new string[] {
                        "v4",
                        "v3"});
            table57.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 394
 testRunner.And("the edges", ((string)(null)), table57, "And ");
#line 400
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table58.AddRow(new string[] {
                        "v0",
                        "v2"});
            table58.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 401
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table58, "When ");
#line 405
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table59.AddRow(new string[] {
                        "v0"});
            table59.AddRow(new string[] {
                        "v1"});
            table59.AddRow(new string[] {
                        "v2"});
            table59.AddRow(new string[] {
                        "v3"});
            table59.AddRow(new string[] {
                        "v4"});
#line 406
 testRunner.And("he contains the vertices", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table60.AddRow(new string[] {
                        "v0",
                        "v1"});
            table60.AddRow(new string[] {
                        "v1",
                        "v4"});
            table60.AddRow(new string[] {
                        "v4",
                        "v3"});
            table60.AddRow(new string[] {
                        "v3",
                        "v4"});
            table60.AddRow(new string[] {
                        "v0",
                        "v2"});
            table60.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 413
 testRunner.And("he contains the edges", ((string)(null)), table60, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges to a undirected graph who allow parallel edges")]
        public virtual void AddAArrayOfEdgesToAUndirectedGraphWhoAllowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges to a undirected graph who allow parallel edges", ((string[])(null)));
#line 422
this.ScenarioSetup(scenarioInfo);
#line 423
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 424
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table61.AddRow(new string[] {
                        "v0"});
            table61.AddRow(new string[] {
                        "v1"});
            table61.AddRow(new string[] {
                        "v2"});
            table61.AddRow(new string[] {
                        "v3"});
            table61.AddRow(new string[] {
                        "v4"});
#line 425
 testRunner.And("the vertices", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table62.AddRow(new string[] {
                        "v0",
                        "v1"});
            table62.AddRow(new string[] {
                        "v1",
                        "v4"});
            table62.AddRow(new string[] {
                        "v4",
                        "v3"});
            table62.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 432
 testRunner.And("the edges", ((string)(null)), table62, "And ");
#line 438
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table63.AddRow(new string[] {
                        "v0",
                        "v2"});
            table63.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 439
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table63, "When ");
#line 443
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table64.AddRow(new string[] {
                        "v0"});
            table64.AddRow(new string[] {
                        "v1"});
            table64.AddRow(new string[] {
                        "v2"});
            table64.AddRow(new string[] {
                        "v3"});
            table64.AddRow(new string[] {
                        "v4"});
#line 444
 testRunner.And("he contains the vertices", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table65.AddRow(new string[] {
                        "v0",
                        "v1"});
            table65.AddRow(new string[] {
                        "v1",
                        "v4"});
            table65.AddRow(new string[] {
                        "v4",
                        "v3"});
            table65.AddRow(new string[] {
                        "v3",
                        "v4"});
            table65.AddRow(new string[] {
                        "v0",
                        "v2"});
            table65.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 451
 testRunner.And("he contains the edges", ((string)(null)), table65, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a IEnumerable of Edges to a undirected graph who disallow parallel edges")]
        public virtual void AddAIEnumerableOfEdgesToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a IEnumerable of Edges to a undirected graph who disallow parallel edges", ((string[])(null)));
#line 460
this.ScenarioSetup(scenarioInfo);
#line 461
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 462
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table66.AddRow(new string[] {
                        "v0"});
            table66.AddRow(new string[] {
                        "v1"});
            table66.AddRow(new string[] {
                        "v2"});
            table66.AddRow(new string[] {
                        "v3"});
            table66.AddRow(new string[] {
                        "v4"});
#line 463
 testRunner.And("the vertices", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table67.AddRow(new string[] {
                        "v0",
                        "v1"});
            table67.AddRow(new string[] {
                        "v1",
                        "v4"});
            table67.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 470
 testRunner.And("the edges", ((string)(null)), table67, "And ");
#line 475
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table68.AddRow(new string[] {
                        "v0",
                        "v2"});
            table68.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 476
 testRunner.When("I add the following IEnumerable of edges to the undirected graph", ((string)(null)), table68, "When ");
#line 480
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table69.AddRow(new string[] {
                        "v0"});
            table69.AddRow(new string[] {
                        "v1"});
            table69.AddRow(new string[] {
                        "v2"});
            table69.AddRow(new string[] {
                        "v3"});
            table69.AddRow(new string[] {
                        "v4"});
#line 481
 testRunner.And("he contains the vertices", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table70.AddRow(new string[] {
                        "v0",
                        "v1"});
            table70.AddRow(new string[] {
                        "v1",
                        "v4"});
            table70.AddRow(new string[] {
                        "v4",
                        "v3"});
            table70.AddRow(new string[] {
                        "v0",
                        "v2"});
            table70.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 488
 testRunner.And("he contains the edges", ((string)(null)), table70, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a array of Edges to a undirected graph who disallow parallel edges")]
        public virtual void AddAArrayOfEdgesToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a array of Edges to a undirected graph who disallow parallel edges", ((string[])(null)));
#line 496
this.ScenarioSetup(scenarioInfo);
#line 497
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 498
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table71.AddRow(new string[] {
                        "v0"});
            table71.AddRow(new string[] {
                        "v1"});
            table71.AddRow(new string[] {
                        "v2"});
            table71.AddRow(new string[] {
                        "v3"});
            table71.AddRow(new string[] {
                        "v4"});
#line 499
 testRunner.And("the vertices", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table72.AddRow(new string[] {
                        "v0",
                        "v1"});
            table72.AddRow(new string[] {
                        "v1",
                        "v4"});
            table72.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 506
 testRunner.And("the edges", ((string)(null)), table72, "And ");
#line 511
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table73.AddRow(new string[] {
                        "v0",
                        "v2"});
            table73.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 512
 testRunner.When("I add the following array of edges to the undirected graph", ((string)(null)), table73, "When ");
#line 516
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table74.AddRow(new string[] {
                        "v0"});
            table74.AddRow(new string[] {
                        "v1"});
            table74.AddRow(new string[] {
                        "v2"});
            table74.AddRow(new string[] {
                        "v3"});
            table74.AddRow(new string[] {
                        "v4"});
#line 517
 testRunner.And("he contains the vertices", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table75.AddRow(new string[] {
                        "v0",
                        "v1"});
            table75.AddRow(new string[] {
                        "v1",
                        "v4"});
            table75.AddRow(new string[] {
                        "v4",
                        "v3"});
            table75.AddRow(new string[] {
                        "v0",
                        "v2"});
            table75.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 524
 testRunner.And("he contains the edges", ((string)(null)), table75, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an edge whose vertices who are not already contained in a undirected graph")]
        public virtual void AddAnEdgeWhoseVerticesWhoAreNotAlreadyContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an edge whose vertices who are not already contained in a undirected graph", ((string[])(null)));
#line 532
this.ScenarioSetup(scenarioInfo);
#line 533
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 534
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table76.AddRow(new string[] {
                        "v0"});
            table76.AddRow(new string[] {
                        "v1"});
            table76.AddRow(new string[] {
                        "v2"});
            table76.AddRow(new string[] {
                        "v3"});
            table76.AddRow(new string[] {
                        "v4"});
#line 535
 testRunner.And("the vertices", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table77.AddRow(new string[] {
                        "v0",
                        "v1"});
            table77.AddRow(new string[] {
                        "v1",
                        "v4"});
            table77.AddRow(new string[] {
                        "v4",
                        "v3"});
            table77.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 542
 testRunner.And("the edges", ((string)(null)), table77, "And ");
#line 548
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table78.AddRow(new string[] {
                        "v5",
                        "v6"});
#line 549
 testRunner.When("I add the edge to the undirected graph", ((string)(null)), table78, "When ");
#line 552
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table79.AddRow(new string[] {
                        "v0"});
            table79.AddRow(new string[] {
                        "v1"});
            table79.AddRow(new string[] {
                        "v2"});
            table79.AddRow(new string[] {
                        "v3"});
            table79.AddRow(new string[] {
                        "v4"});
#line 553
 testRunner.And("he contains the vertices", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table80.AddRow(new string[] {
                        "v0",
                        "v1"});
            table80.AddRow(new string[] {
                        "v1",
                        "v4"});
            table80.AddRow(new string[] {
                        "v4",
                        "v3"});
            table80.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 560
 testRunner.And("he contains the edges", ((string)(null)), table80, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
