// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs.UndirectedGraph.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Removing edge(s), but not her/their vertices, from a undirected graph")]
    public partial class RemovingEdgeSButNotHerTheirVerticesFromAUndirectedGraphFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RemoveEdge.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Removing edge(s), but not her/their vertices, from a undirected graph", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove an edge from a undirected graph who allow parallel edges")]
        public virtual void RemoveAnEdgeFromAUndirectedGraphWhoAllowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an edge from a undirected graph who allow parallel edges", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table3.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 21
 testRunner.When("I remove the edge", ((string)(null)), table3, "When ");
#line 24
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 25
 testRunner.And("he contains the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table5.AddRow(new string[] {
                        "v1",
                        "v4"});
            table5.AddRow(new string[] {
                        "v4",
                        "v4"});
            table5.AddRow(new string[] {
                        "v4",
                        "v3"});
            table5.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 32
 testRunner.And("he contains the edges", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove an edge from a undirected graph who disallow parallel edges")]
        public virtual void RemoveAnEdgeFromAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an edge from a undirected graph who disallow parallel edges", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 42
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "v4",
                        "v4"});
            table7.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 49
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 55
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table8.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 56
 testRunner.When("I remove the edge", ((string)(null)), table8, "When ");
#line 59
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "v0"});
            table9.AddRow(new string[] {
                        "v1"});
            table9.AddRow(new string[] {
                        "v2"});
            table9.AddRow(new string[] {
                        "v3"});
            table9.AddRow(new string[] {
                        "v4"});
#line 60
 testRunner.And("he contains the vertices", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table10.AddRow(new string[] {
                        "v1",
                        "v4"});
            table10.AddRow(new string[] {
                        "v4",
                        "v4"});
            table10.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 67
 testRunner.And("he contains the edges", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a parallel edge from a undirected graph")]
        public virtual void RemoveAParallelEdgeFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a parallel edge from a undirected graph", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 76
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 83
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 90
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table13.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 91
 testRunner.When("I remove the edge", ((string)(null)), table13, "When ");
#line 94
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 95
 testRunner.And("he contains the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table15.AddRow(new string[] {
                        "v0",
                        "v1"});
            table15.AddRow(new string[] {
                        "v1",
                        "v4"});
            table15.AddRow(new string[] {
                        "v4",
                        "v4"});
            table15.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 102
 testRunner.And("he contains the edges", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a parallel edge her vertices from a undirected graph")]
        public virtual void RemoveAParallelEdgeHerVerticesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a parallel edge her vertices from a undirected graph", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 112
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "v4",
                        "v4"});
            table17.AddRow(new string[] {
                        "v4",
                        "v3"});
            table17.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 119
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 126
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table18.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 127
 testRunner.When("I remove the edge and her vertices", ((string)(null)), table18, "When ");
#line 130
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "v0"});
            table19.AddRow(new string[] {
                        "v1"});
            table19.AddRow(new string[] {
                        "v2"});
            table19.AddRow(new string[] {
                        "v3"});
            table19.AddRow(new string[] {
                        "v4"});
#line 131
 testRunner.And("he contains the vertices", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table20.AddRow(new string[] {
                        "v0",
                        "v1"});
            table20.AddRow(new string[] {
                        "v1",
                        "v4"});
            table20.AddRow(new string[] {
                        "v4",
                        "v4"});
            table20.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 138
 testRunner.And("he contains the edges", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove edges from a undirected graph who allow parallel edges")]
        public virtual void RemoveEdgesFromAUndirectedGraphWhoAllowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove edges from a undirected graph who allow parallel edges", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table21.AddRow(new string[] {
                        "v0"});
            table21.AddRow(new string[] {
                        "v1"});
            table21.AddRow(new string[] {
                        "v2"});
            table21.AddRow(new string[] {
                        "v3"});
            table21.AddRow(new string[] {
                        "v4"});
#line 148
 testRunner.And("the vertices", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table22.AddRow(new string[] {
                        "v0",
                        "v1"});
            table22.AddRow(new string[] {
                        "v1",
                        "v4"});
            table22.AddRow(new string[] {
                        "v4",
                        "v4"});
            table22.AddRow(new string[] {
                        "v4",
                        "v3"});
            table22.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 155
 testRunner.And("the edges", ((string)(null)), table22, "And ");
#line 162
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table23.AddRow(new string[] {
                        "v0",
                        "v1"});
            table23.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 163
 testRunner.When("I remove the edges", ((string)(null)), table23, "When ");
#line 167
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table24.AddRow(new string[] {
                        "v0"});
            table24.AddRow(new string[] {
                        "v1"});
            table24.AddRow(new string[] {
                        "v2"});
            table24.AddRow(new string[] {
                        "v3"});
            table24.AddRow(new string[] {
                        "v4"});
#line 168
 testRunner.And("he contains the vertices", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table25.AddRow(new string[] {
                        "v4",
                        "v4"});
            table25.AddRow(new string[] {
                        "v4",
                        "v3"});
            table25.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 175
 testRunner.And("he contains the edges", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove edges from a undirected graph who disallow parallel edges")]
        public virtual void RemoveEdgesFromAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove edges from a undirected graph who disallow parallel edges", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table26.AddRow(new string[] {
                        "v0"});
            table26.AddRow(new string[] {
                        "v1"});
            table26.AddRow(new string[] {
                        "v2"});
            table26.AddRow(new string[] {
                        "v3"});
            table26.AddRow(new string[] {
                        "v4"});
#line 184
 testRunner.And("the vertices", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table27.AddRow(new string[] {
                        "v0",
                        "v1"});
            table27.AddRow(new string[] {
                        "v1",
                        "v4"});
            table27.AddRow(new string[] {
                        "v4",
                        "v4"});
            table27.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 191
 testRunner.And("the edges", ((string)(null)), table27, "And ");
#line 197
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table28.AddRow(new string[] {
                        "v0",
                        "v1"});
            table28.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 198
 testRunner.When("I remove the edges", ((string)(null)), table28, "When ");
#line 202
 testRunner.Then("I get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table29.AddRow(new string[] {
                        "v0"});
            table29.AddRow(new string[] {
                        "v1"});
            table29.AddRow(new string[] {
                        "v2"});
            table29.AddRow(new string[] {
                        "v3"});
            table29.AddRow(new string[] {
                        "v4"});
#line 203
 testRunner.And("he contains the vertices", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table30.AddRow(new string[] {
                        "v4",
                        "v4"});
            table30.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 210
 testRunner.And("he contains the edges", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
