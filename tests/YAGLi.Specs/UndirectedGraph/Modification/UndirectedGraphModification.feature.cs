// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs.UndirectedGraph.Modification
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UndirectedGraphModification")]
    public partial class UndirectedGraphModificationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UndirectedGraphModification.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UndirectedGraphModification", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a loop to a undirected graph who disallow loops")]
        public virtual void AddALoopToAUndirectedGraphWhoDisallowLoops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a loop to a undirected graph who disallow loops", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property disallow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 19
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table3.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 20
 testRunner.When("I add the edges", ((string)(null)), table3, "When ");
#line 23
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 24
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table5.AddRow(new string[] {
                        "v0",
                        "v1"});
            table5.AddRow(new string[] {
                        "v1",
                        "v4"});
            table5.AddRow(new string[] {
                        "v4",
                        "v3"});
            table5.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 31
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a parallel edge to a undirected graph who disallow parallel edges")]
        public virtual void AddAParallelEdgeToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a parallel edge to a undirected graph who disallow parallel edges", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 41
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 48
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 53
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table8.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 54
 testRunner.When("I add the edges", ((string)(null)), table8, "When ");
#line 57
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "v0"});
            table9.AddRow(new string[] {
                        "v1"});
            table9.AddRow(new string[] {
                        "v2"});
            table9.AddRow(new string[] {
                        "v3"});
            table9.AddRow(new string[] {
                        "v4"});
#line 58
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table10.AddRow(new string[] {
                        "v0",
                        "v1"});
            table10.AddRow(new string[] {
                        "v1",
                        "v4"});
            table10.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 65
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a loop to a undirected graph")]
        public virtual void AddALoopToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a loop to a undirected graph", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 74
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 81
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 87
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table13.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 88
 testRunner.When("I add the edges", ((string)(null)), table13, "When ");
#line 91
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 92
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table15.AddRow(new string[] {
                        "v0",
                        "v1"});
            table15.AddRow(new string[] {
                        "v1",
                        "v4"});
            table15.AddRow(new string[] {
                        "v4",
                        "v3"});
            table15.AddRow(new string[] {
                        "v3",
                        "v4"});
            table15.AddRow(new string[] {
                        "v0",
                        "v0"});
#line 99
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a parallel edge to a undirected graph")]
        public virtual void AddAParallelEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a parallel edge to a undirected graph", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 109
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 110
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 117
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 122
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table18.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 123
 testRunner.When("I add the edges", ((string)(null)), table18, "When ");
#line 126
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "v0"});
            table19.AddRow(new string[] {
                        "v1"});
            table19.AddRow(new string[] {
                        "v2"});
            table19.AddRow(new string[] {
                        "v3"});
            table19.AddRow(new string[] {
                        "v4"});
#line 127
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table20.AddRow(new string[] {
                        "v0",
                        "v1"});
            table20.AddRow(new string[] {
                        "v1",
                        "v4"});
            table20.AddRow(new string[] {
                        "v4",
                        "v3"});
            table20.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 134
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a edge to a undirected graph")]
        public virtual void AddAEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a edge to a undirected graph", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table21.AddRow(new string[] {
                        "v0"});
            table21.AddRow(new string[] {
                        "v1"});
            table21.AddRow(new string[] {
                        "v2"});
            table21.AddRow(new string[] {
                        "v3"});
            table21.AddRow(new string[] {
                        "v4"});
#line 144
 testRunner.And("the vertices", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table22.AddRow(new string[] {
                        "v0",
                        "v1"});
            table22.AddRow(new string[] {
                        "v1",
                        "v4"});
            table22.AddRow(new string[] {
                        "v4",
                        "v3"});
            table22.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 151
 testRunner.And("the edges", ((string)(null)), table22, "And ");
#line 157
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table23.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 158
 testRunner.When("I add the edge", ((string)(null)), table23, "When ");
#line 161
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table24.AddRow(new string[] {
                        "v0"});
            table24.AddRow(new string[] {
                        "v1"});
            table24.AddRow(new string[] {
                        "v2"});
            table24.AddRow(new string[] {
                        "v3"});
            table24.AddRow(new string[] {
                        "v4"});
#line 162
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table25.AddRow(new string[] {
                        "v0",
                        "v1"});
            table25.AddRow(new string[] {
                        "v1",
                        "v4"});
            table25.AddRow(new string[] {
                        "v4",
                        "v3"});
            table25.AddRow(new string[] {
                        "v3",
                        "v4"});
            table25.AddRow(new string[] {
                        "v0",
                        "v2"});
#line 169
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edges to a undirected graph")]
        public virtual void AddEdgesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edges to a undirected graph", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line 178
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table26.AddRow(new string[] {
                        "v0"});
            table26.AddRow(new string[] {
                        "v1"});
            table26.AddRow(new string[] {
                        "v2"});
            table26.AddRow(new string[] {
                        "v3"});
            table26.AddRow(new string[] {
                        "v4"});
#line 180
 testRunner.And("the vertices", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table27.AddRow(new string[] {
                        "v0",
                        "v1"});
            table27.AddRow(new string[] {
                        "v1",
                        "v4"});
            table27.AddRow(new string[] {
                        "v4",
                        "v3"});
            table27.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 187
 testRunner.And("the edges", ((string)(null)), table27, "And ");
#line 193
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table28.AddRow(new string[] {
                        "v0",
                        "v2"});
            table28.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 194
 testRunner.When("I add the edges", ((string)(null)), table28, "When ");
#line 198
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table29.AddRow(new string[] {
                        "v0"});
            table29.AddRow(new string[] {
                        "v1"});
            table29.AddRow(new string[] {
                        "v2"});
            table29.AddRow(new string[] {
                        "v3"});
            table29.AddRow(new string[] {
                        "v4"});
#line 199
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table30.AddRow(new string[] {
                        "v0",
                        "v1"});
            table30.AddRow(new string[] {
                        "v1",
                        "v4"});
            table30.AddRow(new string[] {
                        "v4",
                        "v3"});
            table30.AddRow(new string[] {
                        "v3",
                        "v4"});
            table30.AddRow(new string[] {
                        "v0",
                        "v2"});
            table30.AddRow(new string[] {
                        "v1",
                        "v2"});
#line 206
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a edge with vertices who are not already contained in a undirected graph")]
        public virtual void AddAEdgeWithVerticesWhoAreNotAlreadyContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a edge with vertices who are not already contained in a undirected graph", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line 216
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table31.AddRow(new string[] {
                        "v0"});
            table31.AddRow(new string[] {
                        "v1"});
            table31.AddRow(new string[] {
                        "v2"});
            table31.AddRow(new string[] {
                        "v3"});
            table31.AddRow(new string[] {
                        "v4"});
#line 218
 testRunner.And("the vertices", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table32.AddRow(new string[] {
                        "v0",
                        "v1"});
            table32.AddRow(new string[] {
                        "v1",
                        "v4"});
            table32.AddRow(new string[] {
                        "v4",
                        "v3"});
            table32.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 225
 testRunner.And("the edges", ((string)(null)), table32, "And ");
#line 231
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table33.AddRow(new string[] {
                        "v5",
                        "v6"});
#line 232
 testRunner.When("I add the edge", ((string)(null)), table33, "When ");
#line 235
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table34.AddRow(new string[] {
                        "v0"});
            table34.AddRow(new string[] {
                        "v1"});
            table34.AddRow(new string[] {
                        "v2"});
            table34.AddRow(new string[] {
                        "v3"});
            table34.AddRow(new string[] {
                        "v4"});
#line 236
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table35.AddRow(new string[] {
                        "v0",
                        "v1"});
            table35.AddRow(new string[] {
                        "v1",
                        "v4"});
            table35.AddRow(new string[] {
                        "v4",
                        "v3"});
            table35.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 243
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a vertex to a undirected graph")]
        public virtual void AddAVertexToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a vertex to a undirected graph", ((string[])(null)));
#line 250
this.ScenarioSetup(scenarioInfo);
#line 251
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table36.AddRow(new string[] {
                        "v0"});
            table36.AddRow(new string[] {
                        "v1"});
            table36.AddRow(new string[] {
                        "v2"});
            table36.AddRow(new string[] {
                        "v3"});
            table36.AddRow(new string[] {
                        "v4"});
#line 253
 testRunner.And("the vertices", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table37.AddRow(new string[] {
                        "v0",
                        "v1"});
            table37.AddRow(new string[] {
                        "v1",
                        "v4"});
            table37.AddRow(new string[] {
                        "v4",
                        "v3"});
            table37.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 260
 testRunner.And("the edges", ((string)(null)), table37, "And ");
#line 266
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.When("I add the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 268
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table38.AddRow(new string[] {
                        "v0"});
            table38.AddRow(new string[] {
                        "v1"});
            table38.AddRow(new string[] {
                        "v2"});
            table38.AddRow(new string[] {
                        "v3"});
            table38.AddRow(new string[] {
                        "v4"});
            table38.AddRow(new string[] {
                        "v5"});
#line 269
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table39.AddRow(new string[] {
                        "v0",
                        "v1"});
            table39.AddRow(new string[] {
                        "v1",
                        "v4"});
            table39.AddRow(new string[] {
                        "v4",
                        "v3"});
            table39.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 277
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add vertices to a undirected graph")]
        public virtual void AddVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add vertices to a undirected graph", ((string[])(null)));
#line 284
this.ScenarioSetup(scenarioInfo);
#line 285
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 286
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table40.AddRow(new string[] {
                        "v0"});
            table40.AddRow(new string[] {
                        "v1"});
            table40.AddRow(new string[] {
                        "v2"});
            table40.AddRow(new string[] {
                        "v3"});
            table40.AddRow(new string[] {
                        "v4"});
#line 287
 testRunner.And("the vertices", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table41.AddRow(new string[] {
                        "v0",
                        "v1"});
            table41.AddRow(new string[] {
                        "v1",
                        "v4"});
            table41.AddRow(new string[] {
                        "v4",
                        "v3"});
            table41.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 294
 testRunner.And("the edges", ((string)(null)), table41, "And ");
#line 300
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table42.AddRow(new string[] {
                        "v5"});
            table42.AddRow(new string[] {
                        "v6"});
#line 301
 testRunner.When("I add the vertices", ((string)(null)), table42, "When ");
#line 305
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table43.AddRow(new string[] {
                        "v0"});
            table43.AddRow(new string[] {
                        "v1"});
            table43.AddRow(new string[] {
                        "v2"});
            table43.AddRow(new string[] {
                        "v3"});
            table43.AddRow(new string[] {
                        "v4"});
            table43.AddRow(new string[] {
                        "v5"});
            table43.AddRow(new string[] {
                        "v6"});
#line 306
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table44.AddRow(new string[] {
                        "v0",
                        "v1"});
            table44.AddRow(new string[] {
                        "v1",
                        "v4"});
            table44.AddRow(new string[] {
                        "v4",
                        "v3"});
            table44.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 315
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table44, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edge and vertices to a undirected graph")]
        public virtual void AddEdgeAndVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edge and vertices to a undirected graph", ((string[])(null)));
#line 322
this.ScenarioSetup(scenarioInfo);
#line 323
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table45.AddRow(new string[] {
                        "v0"});
            table45.AddRow(new string[] {
                        "v1"});
            table45.AddRow(new string[] {
                        "v2"});
            table45.AddRow(new string[] {
                        "v3"});
            table45.AddRow(new string[] {
                        "v4"});
#line 325
 testRunner.And("the vertices", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table46.AddRow(new string[] {
                        "v0",
                        "v1"});
            table46.AddRow(new string[] {
                        "v1",
                        "v4"});
            table46.AddRow(new string[] {
                        "v4",
                        "v3"});
            table46.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 332
 testRunner.And("the edges", ((string)(null)), table46, "And ");
#line 338
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table47.AddRow(new string[] {
                        "v5",
                        "v6"});
#line 339
 testRunner.When("I add the following edge with their vertices", ((string)(null)), table47, "When ");
#line 342
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table48.AddRow(new string[] {
                        "v0"});
            table48.AddRow(new string[] {
                        "v1"});
            table48.AddRow(new string[] {
                        "v2"});
            table48.AddRow(new string[] {
                        "v3"});
            table48.AddRow(new string[] {
                        "v4"});
            table48.AddRow(new string[] {
                        "v5"});
            table48.AddRow(new string[] {
                        "v6"});
#line 343
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table49.AddRow(new string[] {
                        "v0",
                        "v1"});
            table49.AddRow(new string[] {
                        "v1",
                        "v4"});
            table49.AddRow(new string[] {
                        "v4",
                        "v3"});
            table49.AddRow(new string[] {
                        "v3",
                        "v4"});
            table49.AddRow(new string[] {
                        "v5",
                        "v6"});
#line 352
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table49, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edges and vertices to a undirected graph")]
        public virtual void AddEdgesAndVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edges and vertices to a undirected graph", ((string[])(null)));
#line 360
this.ScenarioSetup(scenarioInfo);
#line 361
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 362
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table50.AddRow(new string[] {
                        "v0"});
            table50.AddRow(new string[] {
                        "v1"});
            table50.AddRow(new string[] {
                        "v2"});
            table50.AddRow(new string[] {
                        "v3"});
            table50.AddRow(new string[] {
                        "v4"});
#line 363
 testRunner.And("the vertices", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table51.AddRow(new string[] {
                        "v0",
                        "v1"});
            table51.AddRow(new string[] {
                        "v1",
                        "v4"});
            table51.AddRow(new string[] {
                        "v4",
                        "v3"});
            table51.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 370
 testRunner.And("the edges", ((string)(null)), table51, "And ");
#line 376
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table52.AddRow(new string[] {
                        "v5",
                        "v6"});
            table52.AddRow(new string[] {
                        "v0",
                        "v7"});
#line 377
 testRunner.When("I add the edges and vertices", ((string)(null)), table52, "When ");
#line 381
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table53.AddRow(new string[] {
                        "v0"});
            table53.AddRow(new string[] {
                        "v1"});
            table53.AddRow(new string[] {
                        "v2"});
            table53.AddRow(new string[] {
                        "v3"});
            table53.AddRow(new string[] {
                        "v4"});
            table53.AddRow(new string[] {
                        "v5"});
            table53.AddRow(new string[] {
                        "v6"});
            table53.AddRow(new string[] {
                        "v7"});
#line 382
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table54.AddRow(new string[] {
                        "v0",
                        "v1"});
            table54.AddRow(new string[] {
                        "v1",
                        "v4"});
            table54.AddRow(new string[] {
                        "v4",
                        "v3"});
            table54.AddRow(new string[] {
                        "v3",
                        "v4"});
            table54.AddRow(new string[] {
                        "v5",
                        "v6"});
            table54.AddRow(new string[] {
                        "v0",
                        "v7"});
#line 392
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table54, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove an edge from a undirected graph")]
        public virtual void RemoveAnEdgeFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an edge from a undirected graph", ((string[])(null)));
#line 401
this.ScenarioSetup(scenarioInfo);
#line 402
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 403
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table55.AddRow(new string[] {
                        "v0"});
            table55.AddRow(new string[] {
                        "v1"});
            table55.AddRow(new string[] {
                        "v2"});
            table55.AddRow(new string[] {
                        "v3"});
            table55.AddRow(new string[] {
                        "v4"});
#line 404
 testRunner.And("the vertices", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table56.AddRow(new string[] {
                        "v0",
                        "v1"});
            table56.AddRow(new string[] {
                        "v1",
                        "v4"});
            table56.AddRow(new string[] {
                        "v4",
                        "v4"});
            table56.AddRow(new string[] {
                        "v4",
                        "v3"});
            table56.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 411
 testRunner.And("the edges", ((string)(null)), table56, "And ");
#line 418
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table57.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 419
 testRunner.When("I remove the edge", ((string)(null)), table57, "When ");
#line 422
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table58.AddRow(new string[] {
                        "v0"});
            table58.AddRow(new string[] {
                        "v1"});
            table58.AddRow(new string[] {
                        "v2"});
            table58.AddRow(new string[] {
                        "v3"});
            table58.AddRow(new string[] {
                        "v4"});
#line 423
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table59.AddRow(new string[] {
                        "v1",
                        "v4"});
            table59.AddRow(new string[] {
                        "v4",
                        "v4"});
            table59.AddRow(new string[] {
                        "v4",
                        "v3"});
            table59.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 430
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table59, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a parallel edge from a undirected graph")]
        public virtual void RemoveAParallelEdgeFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a parallel edge from a undirected graph", ((string[])(null)));
#line 437
this.ScenarioSetup(scenarioInfo);
#line 438
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 439
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table60.AddRow(new string[] {
                        "v0"});
            table60.AddRow(new string[] {
                        "v1"});
            table60.AddRow(new string[] {
                        "v2"});
            table60.AddRow(new string[] {
                        "v3"});
            table60.AddRow(new string[] {
                        "v4"});
#line 440
 testRunner.And("the vertices", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table61.AddRow(new string[] {
                        "v0",
                        "v1"});
            table61.AddRow(new string[] {
                        "v1",
                        "v4"});
            table61.AddRow(new string[] {
                        "v4",
                        "v4"});
            table61.AddRow(new string[] {
                        "v4",
                        "v3"});
            table61.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 447
 testRunner.And("the edges", ((string)(null)), table61, "And ");
#line 454
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table62.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 455
 testRunner.When("I remove the edge", ((string)(null)), table62, "When ");
#line 458
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table63.AddRow(new string[] {
                        "v0"});
            table63.AddRow(new string[] {
                        "v1"});
            table63.AddRow(new string[] {
                        "v2"});
            table63.AddRow(new string[] {
                        "v3"});
            table63.AddRow(new string[] {
                        "v4"});
#line 459
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table64.AddRow(new string[] {
                        "v0",
                        "v1"});
            table64.AddRow(new string[] {
                        "v1",
                        "v4"});
            table64.AddRow(new string[] {
                        "v4",
                        "v4"});
            table64.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 466
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table64, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove an edge and her vertices from a undirected graph")]
        public virtual void RemoveAnEdgeAndHerVerticesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an edge and her vertices from a undirected graph", ((string[])(null)));
#line 473
this.ScenarioSetup(scenarioInfo);
#line 474
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 475
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table65.AddRow(new string[] {
                        "v0"});
            table65.AddRow(new string[] {
                        "v1"});
            table65.AddRow(new string[] {
                        "v2"});
            table65.AddRow(new string[] {
                        "v3"});
            table65.AddRow(new string[] {
                        "v4"});
#line 476
 testRunner.And("the vertices", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table66.AddRow(new string[] {
                        "v0",
                        "v1"});
            table66.AddRow(new string[] {
                        "v1",
                        "v4"});
            table66.AddRow(new string[] {
                        "v4",
                        "v4"});
            table66.AddRow(new string[] {
                        "v4",
                        "v3"});
            table66.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 483
 testRunner.And("the edges", ((string)(null)), table66, "And ");
#line 490
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table67.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 491
 testRunner.When("I remove the edge and her vertices", ((string)(null)), table67, "When ");
#line 494
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table68.AddRow(new string[] {
                        "v1"});
            table68.AddRow(new string[] {
                        "v2"});
            table68.AddRow(new string[] {
                        "v3"});
            table68.AddRow(new string[] {
                        "v4"});
#line 495
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table69.AddRow(new string[] {
                        "v1",
                        "v4"});
            table69.AddRow(new string[] {
                        "v4",
                        "v4"});
            table69.AddRow(new string[] {
                        "v4",
                        "v3"});
            table69.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 501
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table69, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a parallel edge her vertices from a undirected graph")]
        public virtual void RemoveAParallelEdgeHerVerticesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a parallel edge her vertices from a undirected graph", ((string[])(null)));
#line 508
this.ScenarioSetup(scenarioInfo);
#line 509
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 510
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table70.AddRow(new string[] {
                        "v0"});
            table70.AddRow(new string[] {
                        "v1"});
            table70.AddRow(new string[] {
                        "v2"});
            table70.AddRow(new string[] {
                        "v3"});
            table70.AddRow(new string[] {
                        "v4"});
#line 511
 testRunner.And("the vertices", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table71.AddRow(new string[] {
                        "v0",
                        "v1"});
            table71.AddRow(new string[] {
                        "v1",
                        "v4"});
            table71.AddRow(new string[] {
                        "v4",
                        "v4"});
            table71.AddRow(new string[] {
                        "v4",
                        "v3"});
            table71.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 518
 testRunner.And("the edges", ((string)(null)), table71, "And ");
#line 525
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table72.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 526
 testRunner.When("I remove the edge and her vertices", ((string)(null)), table72, "When ");
#line 529
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table73.AddRow(new string[] {
                        "v0"});
            table73.AddRow(new string[] {
                        "v1"});
            table73.AddRow(new string[] {
                        "v2"});
            table73.AddRow(new string[] {
                        "v3"});
            table73.AddRow(new string[] {
                        "v4"});
#line 530
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table74.AddRow(new string[] {
                        "v0",
                        "v1"});
            table74.AddRow(new string[] {
                        "v1",
                        "v4"});
            table74.AddRow(new string[] {
                        "v4",
                        "v4"});
            table74.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 537
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table74, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove edges from a undirected graph")]
        public virtual void RemoveEdgesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove edges from a undirected graph", ((string[])(null)));
#line 544
this.ScenarioSetup(scenarioInfo);
#line 545
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 546
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table75.AddRow(new string[] {
                        "v0"});
            table75.AddRow(new string[] {
                        "v1"});
            table75.AddRow(new string[] {
                        "v2"});
            table75.AddRow(new string[] {
                        "v3"});
            table75.AddRow(new string[] {
                        "v4"});
#line 547
 testRunner.And("the vertices", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table76.AddRow(new string[] {
                        "v0",
                        "v1"});
            table76.AddRow(new string[] {
                        "v1",
                        "v4"});
            table76.AddRow(new string[] {
                        "v4",
                        "v4"});
            table76.AddRow(new string[] {
                        "v4",
                        "v3"});
            table76.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 554
 testRunner.And("the edges", ((string)(null)), table76, "And ");
#line 561
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table77.AddRow(new string[] {
                        "v0",
                        "v1"});
            table77.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 562
 testRunner.When("I remove the edges", ((string)(null)), table77, "When ");
#line 566
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table78.AddRow(new string[] {
                        "v0"});
            table78.AddRow(new string[] {
                        "v1"});
            table78.AddRow(new string[] {
                        "v2"});
            table78.AddRow(new string[] {
                        "v3"});
            table78.AddRow(new string[] {
                        "v4"});
#line 567
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table79.AddRow(new string[] {
                        "v4",
                        "v4"});
            table79.AddRow(new string[] {
                        "v4",
                        "v3"});
            table79.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 574
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table79, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove edges and their vertices from a undirected graph")]
        public virtual void RemoveEdgesAndTheirVerticesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove edges and their vertices from a undirected graph", ((string[])(null)));
#line 580
this.ScenarioSetup(scenarioInfo);
#line 581
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 582
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table80.AddRow(new string[] {
                        "v0"});
            table80.AddRow(new string[] {
                        "v1"});
            table80.AddRow(new string[] {
                        "v2"});
            table80.AddRow(new string[] {
                        "v3"});
            table80.AddRow(new string[] {
                        "v4"});
#line 583
 testRunner.And("the vertices", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table81.AddRow(new string[] {
                        "v0",
                        "v1"});
            table81.AddRow(new string[] {
                        "v1",
                        "v4"});
            table81.AddRow(new string[] {
                        "v4",
                        "v4"});
            table81.AddRow(new string[] {
                        "v4",
                        "v3"});
            table81.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 590
 testRunner.And("the edges", ((string)(null)), table81, "And ");
#line 597
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table82.AddRow(new string[] {
                        "v0",
                        "v1"});
            table82.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 598
 testRunner.When("I remove the edges and their vertices", ((string)(null)), table82, "When ");
#line 602
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table83.AddRow(new string[] {
                        "v2"});
            table83.AddRow(new string[] {
                        "v3"});
            table83.AddRow(new string[] {
                        "v4"});
#line 603
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table84.AddRow(new string[] {
                        "v4",
                        "v4"});
            table84.AddRow(new string[] {
                        "v4",
                        "v3"});
            table84.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 608
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table84, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a vertex from a undirected graph")]
        public virtual void RemoveAVertexFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a vertex from a undirected graph", ((string[])(null)));
#line 614
this.ScenarioSetup(scenarioInfo);
#line 615
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 616
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table85.AddRow(new string[] {
                        "v0"});
            table85.AddRow(new string[] {
                        "v1"});
            table85.AddRow(new string[] {
                        "v2"});
            table85.AddRow(new string[] {
                        "v3"});
            table85.AddRow(new string[] {
                        "v4"});
#line 617
 testRunner.And("the vertices", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table86.AddRow(new string[] {
                        "v0",
                        "v1"});
            table86.AddRow(new string[] {
                        "v1",
                        "v4"});
            table86.AddRow(new string[] {
                        "v4",
                        "v4"});
            table86.AddRow(new string[] {
                        "v4",
                        "v3"});
            table86.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 624
 testRunner.And("the edges", ((string)(null)), table86, "And ");
#line 631
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 632
 testRunner.When("I remove the vertex \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 633
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table87.AddRow(new string[] {
                        "v0"});
            table87.AddRow(new string[] {
                        "v1"});
            table87.AddRow(new string[] {
                        "v2"});
            table87.AddRow(new string[] {
                        "v3"});
#line 634
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table88.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 640
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table88, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove vertices from a undirected graph")]
        public virtual void RemoveVerticesFromAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove vertices from a undirected graph", ((string[])(null)));
#line 644
this.ScenarioSetup(scenarioInfo);
#line 645
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 646
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table89.AddRow(new string[] {
                        "v0"});
            table89.AddRow(new string[] {
                        "v1"});
            table89.AddRow(new string[] {
                        "v2"});
            table89.AddRow(new string[] {
                        "v3"});
            table89.AddRow(new string[] {
                        "v4"});
#line 647
 testRunner.And("the vertices", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table90.AddRow(new string[] {
                        "v0",
                        "v1"});
            table90.AddRow(new string[] {
                        "v1",
                        "v4"});
            table90.AddRow(new string[] {
                        "v4",
                        "v4"});
            table90.AddRow(new string[] {
                        "v4",
                        "v3"});
            table90.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 654
 testRunner.And("the edges", ((string)(null)), table90, "And ");
#line 661
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table91.AddRow(new string[] {
                        "v0"});
            table91.AddRow(new string[] {
                        "v1"});
#line 662
 testRunner.When("I remove the vertices", ((string)(null)), table91, "When ");
#line 666
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table92.AddRow(new string[] {
                        "v2"});
            table92.AddRow(new string[] {
                        "v3"});
            table92.AddRow(new string[] {
                        "v4"});
#line 667
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table93.AddRow(new string[] {
                        "v4",
                        "v4"});
            table93.AddRow(new string[] {
                        "v4",
                        "v3"});
            table93.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 672
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table93, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
