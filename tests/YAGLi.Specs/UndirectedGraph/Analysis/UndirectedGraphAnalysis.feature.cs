// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs.UndirectedGraph.Analysis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UndirectedGraphAnalysis")]
    public partial class UndirectedGraphAnalysisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UndirectedGraphAnalysis.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UndirectedGraphAnalysis", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
            " and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
                    " and parallel edges", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table2.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("I retrieve the adjacent edges of the edge \"e3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "e1"});
            table3.AddRow(new string[] {
                        "e2"});
            table3.AddRow(new string[] {
                        "e4"});
#line 22
 testRunner.Then("I get the edges", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and parallel edges", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 31
 testRunner.And("the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table5.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table5.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table5.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table5.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table5.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 38
 testRunner.And("the edges", ((string)(null)), table5, "And ");
#line 45
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("I retrieve the adjacent edges of the edge with the ends \"v0\" and \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("I get a empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and disallow parallel edges", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 52
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table7.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 59
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 65
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.When("I retrieve the adjacent edges of the edge with the ends \"v0\" and \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("I get a empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
            "h who allow loops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeEqualToAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
                    "h who allow loops and disallow parallel edges", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "v0"});
            table8.AddRow(new string[] {
                        "v1"});
            table8.AddRow(new string[] {
                        "v2"});
            table8.AddRow(new string[] {
                        "v3"});
            table8.AddRow(new string[] {
                        "v4"});
#line 72
 testRunner.And("the vertices", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table9.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table9.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table9.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table9.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 79
 testRunner.And("the edges", ((string)(null)), table9, "And ");
#line 85
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When("I retrieve the adjacent edges of the edge with the ends \"v3\" and \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table10.AddRow(new string[] {
                        "e1"});
            table10.AddRow(new string[] {
                        "e2"});
#line 87
 testRunner.Then("I get the edges", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex contained in a UndirectedGraph", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 95
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table12.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 102
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 109
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.When("I retrieve the adjacent vertices of the vertex \"v1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "v0"});
            table13.AddRow(new string[] {
                        "v4"});
#line 111
 testRunner.Then("I get the vertices", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex not contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex not contained in a UndirectedGraph", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line 117
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 119
 testRunner.And("the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table15.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table15.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table15.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table15.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table15.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 126
 testRunner.And("the edges", ((string)(null)), table15, "And ");
#line 133
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.When("I retrieve the adjacent vertices of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("I get a empty list of vertices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex not contained in the graph")]
        public virtual void GetTheDegreeOfAVertexNotContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex not contained in the graph", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 140
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table17.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table17.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 147
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 154
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.When("I get the degree of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
 testRunner.Then("I get the degree -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex contained in the graph")]
        public virtual void GetTheDegreeOfAVertexContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex contained in the graph", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table18.AddRow(new string[] {
                        "v0"});
            table18.AddRow(new string[] {
                        "v1"});
            table18.AddRow(new string[] {
                        "v2"});
            table18.AddRow(new string[] {
                        "v3"});
            table18.AddRow(new string[] {
                        "v4"});
#line 161
 testRunner.And("the vertices", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table19.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table19.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table19.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table19.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table19.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 168
 testRunner.And("the edges", ((string)(null)), table19, "And ");
#line 175
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("I get the degree of the vertex \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("I get the degree 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex contained in a undirected graph", ((string[])(null)));
#line 179
this.ScenarioSetup(scenarioInfo);
#line 180
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 181
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "v0"});
            table20.AddRow(new string[] {
                        "v1"});
            table20.AddRow(new string[] {
                        "v2"});
            table20.AddRow(new string[] {
                        "v3"});
            table20.AddRow(new string[] {
                        "v4"});
#line 182
 testRunner.And("the vertices", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table21.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table21.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table21.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table21.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table21.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 189
 testRunner.And("the edges", ((string)(null)), table21, "And ");
#line 196
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("I retrieve the incident edges of the vertex \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table22.AddRow(new string[] {
                        "e1"});
            table22.AddRow(new string[] {
                        "e2"});
            table22.AddRow(new string[] {
                        "e3"});
            table22.AddRow(new string[] {
                        "e4"});
#line 198
 testRunner.Then("I get the edges", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex not contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex not contained in a undirected graph", ((string[])(null)));
#line 205
this.ScenarioSetup(scenarioInfo);
#line 206
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 207
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table23.AddRow(new string[] {
                        "v0"});
            table23.AddRow(new string[] {
                        "v1"});
            table23.AddRow(new string[] {
                        "v2"});
            table23.AddRow(new string[] {
                        "v3"});
            table23.AddRow(new string[] {
                        "v4"});
#line 208
 testRunner.And("the vertices", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table24.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table24.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table24.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table24.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table24.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 215
 testRunner.And("the edges", ((string)(null)), table24, "And ");
#line 222
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.When("I retrieve the incident edges of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 224
 testRunner.Then("I get a empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge contained in a undirected graph", ((string[])(null)));
#line 226
this.ScenarioSetup(scenarioInfo);
#line 227
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 228
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table25.AddRow(new string[] {
                        "v0"});
            table25.AddRow(new string[] {
                        "v1"});
            table25.AddRow(new string[] {
                        "v2"});
            table25.AddRow(new string[] {
                        "v3"});
            table25.AddRow(new string[] {
                        "v4"});
#line 229
 testRunner.And("the vertices", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table26.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table26.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table26.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table26.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table26.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 236
 testRunner.And("the edges", ((string)(null)), table26, "And ");
#line 243
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.When("I get the incident vertices of the edge \"e1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table27.AddRow(new string[] {
                        "v1"});
            table27.AddRow(new string[] {
                        "v4"});
#line 245
 testRunner.Then("I get the vertices", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge not contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge not contained in a undirected graph", ((string[])(null)));
#line 250
this.ScenarioSetup(scenarioInfo);
#line 251
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table28.AddRow(new string[] {
                        "v0"});
            table28.AddRow(new string[] {
                        "v1"});
            table28.AddRow(new string[] {
                        "v2"});
            table28.AddRow(new string[] {
                        "v3"});
            table28.AddRow(new string[] {
                        "v4"});
#line 253
 testRunner.And("the vertices", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table29.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table29.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table29.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table29.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table29.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 260
 testRunner.And("the edges", ((string)(null)), table29, "And ");
#line 267
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
 testRunner.When("I get the incident vertices of the edge with the ends \"v0\" and \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
 testRunner.Then("I get a empty list of vertices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a loop edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfALoopEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a loop edge contained in a undirected graph", ((string[])(null)));
#line 271
this.ScenarioSetup(scenarioInfo);
#line 272
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 273
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table30.AddRow(new string[] {
                        "v0"});
            table30.AddRow(new string[] {
                        "v1"});
            table30.AddRow(new string[] {
                        "v2"});
            table30.AddRow(new string[] {
                        "v3"});
            table30.AddRow(new string[] {
                        "v4"});
#line 274
 testRunner.And("the vertices", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table31.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table31.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table31.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table31.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table31.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 281
 testRunner.And("the edges", ((string)(null)), table31, "And ");
#line 288
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.When("I get the incident vertices of the edge \"e2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table32.AddRow(new string[] {
                        "v4"});
#line 290
 testRunner.Then("I get the vertices", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph contains the expected vertex")]
        public virtual void CheckThatAUndirectedGraphContainsTheExpectedVertex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph contains the expected vertex", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table33.AddRow(new string[] {
                        "v0"});
            table33.AddRow(new string[] {
                        "v1"});
            table33.AddRow(new string[] {
                        "v2"});
            table33.AddRow(new string[] {
                        "v3"});
            table33.AddRow(new string[] {
                        "v4"});
#line 297
 testRunner.And("the vertices", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table34.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table34.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table34.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table34.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table34.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 304
 testRunner.And("the edges", ((string)(null)), table34, "And ");
#line 311
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.When("I check that the graph contains the vertex \"v0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph does not contains the expected vertex")]
        public virtual void CheckThatAUndirectedGraphDoesNotContainsTheExpectedVertex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph does not contains the expected vertex", ((string[])(null)));
#line 315
this.ScenarioSetup(scenarioInfo);
#line 316
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 317
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table35.AddRow(new string[] {
                        "v0"});
            table35.AddRow(new string[] {
                        "v1"});
            table35.AddRow(new string[] {
                        "v2"});
            table35.AddRow(new string[] {
                        "v3"});
            table35.AddRow(new string[] {
                        "v4"});
#line 318
 testRunner.And("the vertices", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table36.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table36.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table36.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table36.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table36.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 325
 testRunner.And("the edges", ((string)(null)), table36, "And ");
#line 332
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.When("I check that the graph contains the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph contains the expected vertices")]
        public virtual void CheckThatAUndirectedGraphContainsTheExpectedVertices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph contains the expected vertices", ((string[])(null)));
#line 336
this.ScenarioSetup(scenarioInfo);
#line 337
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 338
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table37.AddRow(new string[] {
                        "v0"});
            table37.AddRow(new string[] {
                        "v1"});
            table37.AddRow(new string[] {
                        "v2"});
            table37.AddRow(new string[] {
                        "v3"});
            table37.AddRow(new string[] {
                        "v4"});
#line 339
 testRunner.And("the vertices", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table38.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table38.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table38.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table38.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table38.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 346
 testRunner.And("the edges", ((string)(null)), table38, "And ");
#line 353
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table39.AddRow(new string[] {
                        "v0"});
            table39.AddRow(new string[] {
                        "v3"});
            table39.AddRow(new string[] {
                        "v4"});
#line 354
 testRunner.When("I check that the graph contains the vertices", ((string)(null)), table39, "When ");
#line 359
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph does not contains the expected vertices")]
        public virtual void CheckThatAUndirectedGraphDoesNotContainsTheExpectedVertices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph does not contains the expected vertices", ((string[])(null)));
#line 361
this.ScenarioSetup(scenarioInfo);
#line 362
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 363
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table40.AddRow(new string[] {
                        "v0"});
            table40.AddRow(new string[] {
                        "v1"});
            table40.AddRow(new string[] {
                        "v2"});
            table40.AddRow(new string[] {
                        "v3"});
            table40.AddRow(new string[] {
                        "v4"});
#line 364
 testRunner.And("the vertices", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table41.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table41.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table41.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table41.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table41.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 371
 testRunner.And("the edges", ((string)(null)), table41, "And ");
#line 378
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table42.AddRow(new string[] {
                        "v0"});
            table42.AddRow(new string[] {
                        "v3"});
            table42.AddRow(new string[] {
                        "v4"});
            table42.AddRow(new string[] {
                        "v5"});
#line 379
 testRunner.When("I check that the graph contains the vertices", ((string)(null)), table42, "When ");
#line 385
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains a edge")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsAEdge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains a edge", ((string[])(null)));
#line 387
this.ScenarioSetup(scenarioInfo);
#line 388
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 389
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table43.AddRow(new string[] {
                        "v0"});
            table43.AddRow(new string[] {
                        "v1"});
            table43.AddRow(new string[] {
                        "v2"});
            table43.AddRow(new string[] {
                        "v3"});
            table43.AddRow(new string[] {
                        "v4"});
#line 390
 testRunner.And("the vertices", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table44.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table44.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table44.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table44.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table44.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 397
 testRunner.And("the edges", ((string)(null)), table44, "And ");
#line 404
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
 testRunner.When("I check that the graph contains the edge \"e0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 406
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains a edge with the s" +
            "ame ends")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsAEdgeWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains a edge with the s" +
                    "ame ends", ((string[])(null)));
#line 408
this.ScenarioSetup(scenarioInfo);
#line 409
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 410
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table45.AddRow(new string[] {
                        "v0"});
            table45.AddRow(new string[] {
                        "v1"});
            table45.AddRow(new string[] {
                        "v2"});
            table45.AddRow(new string[] {
                        "v3"});
            table45.AddRow(new string[] {
                        "v4"});
#line 411
 testRunner.And("the vertices", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table46.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table46.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table46.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table46.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table46.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 418
 testRunner.And("the edges", ((string)(null)), table46, "And ");
#line 425
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.When("I check that the graph contains the edge with the ends \"v0\" and \"v1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who disallow parallel edges contains a edge with th" +
            "e same ends")]
        public virtual void CheckThatAUndirectedGraphWhoDisallowParallelEdgesContainsAEdgeWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who disallow parallel edges contains a edge with th" +
                    "e same ends", ((string[])(null)));
#line 429
this.ScenarioSetup(scenarioInfo);
#line 430
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 431
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table47.AddRow(new string[] {
                        "v0"});
            table47.AddRow(new string[] {
                        "v1"});
            table47.AddRow(new string[] {
                        "v2"});
            table47.AddRow(new string[] {
                        "v3"});
            table47.AddRow(new string[] {
                        "v4"});
#line 432
 testRunner.And("the vertices", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table48.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table48.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table48.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table48.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table48.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 439
 testRunner.And("the edges", ((string)(null)), table48, "And ");
#line 446
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 447
 testRunner.When("I check that the graph contains the edge with the ends \"v0\" and \"v1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 448
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains edges")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains edges", ((string[])(null)));
#line 450
this.ScenarioSetup(scenarioInfo);
#line 451
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 452
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table49.AddRow(new string[] {
                        "v0"});
            table49.AddRow(new string[] {
                        "v1"});
            table49.AddRow(new string[] {
                        "v2"});
            table49.AddRow(new string[] {
                        "v3"});
            table49.AddRow(new string[] {
                        "v4"});
#line 453
 testRunner.And("the vertices", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table50.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table50.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table50.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table50.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table50.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 460
 testRunner.And("the edges", ((string)(null)), table50, "And ");
#line 467
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table51.AddRow(new string[] {
                        "e0"});
            table51.AddRow(new string[] {
                        "e4"});
#line 468
 testRunner.When("I check that the graph contains the edges", ((string)(null)), table51, "When ");
#line 472
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges does not contains edges wi" +
            "th the same ends")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesDoesNotContainsEdgesWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges does not contains edges wi" +
                    "th the same ends", ((string[])(null)));
#line 474
this.ScenarioSetup(scenarioInfo);
#line 475
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 476
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table52.AddRow(new string[] {
                        "v0"});
            table52.AddRow(new string[] {
                        "v1"});
            table52.AddRow(new string[] {
                        "v2"});
            table52.AddRow(new string[] {
                        "v3"});
            table52.AddRow(new string[] {
                        "v4"});
#line 477
 testRunner.And("the vertices", ((string)(null)), table52, "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table53.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table53.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table53.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table53.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table53.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 484
 testRunner.And("the edges", ((string)(null)), table53, "And ");
#line 491
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
 testRunner.When("I check that the graph contains the edges with the ends \"v0\" and \"v1\" and the end" +
                    "s \"v4\" and \"v3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 493
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who disallow parallel edges contains edges with the" +
            " same ends")]
        public virtual void CheckThatAUndirectedGraphWhoDisallowParallelEdgesContainsEdgesWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who disallow parallel edges contains edges with the" +
                    " same ends", ((string[])(null)));
#line 495
this.ScenarioSetup(scenarioInfo);
#line 496
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 497
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table54.AddRow(new string[] {
                        "v0"});
            table54.AddRow(new string[] {
                        "v1"});
            table54.AddRow(new string[] {
                        "v2"});
            table54.AddRow(new string[] {
                        "v3"});
            table54.AddRow(new string[] {
                        "v4"});
#line 498
 testRunner.And("the vertices", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table55.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table55.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table55.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table55.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table55.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 505
 testRunner.And("the edges", ((string)(null)), table55, "And ");
#line 512
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 513
 testRunner.When("I check that the graph contains the edges with the ends \"v0\" and \"v1\" and the end" +
                    "s \"v4\" and \"v3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 514
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices connected in a undirected graph are adjacent")]
        public virtual void CheckThatTwoVerticesConnectedInAUndirectedGraphAreAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices connected in a undirected graph are adjacent", ((string[])(null)));
#line 516
this.ScenarioSetup(scenarioInfo);
#line 517
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 518
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table56.AddRow(new string[] {
                        "v0"});
            table56.AddRow(new string[] {
                        "v1"});
            table56.AddRow(new string[] {
                        "v2"});
            table56.AddRow(new string[] {
                        "v3"});
            table56.AddRow(new string[] {
                        "v4"});
#line 519
 testRunner.And("the vertices", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table57.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table57.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table57.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table57.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table57.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 526
 testRunner.And("the edges", ((string)(null)), table57, "And ");
#line 533
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 534
 testRunner.When("I check if the vertices \"v0\" and \"v1\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 535
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices not connected in a undirected graph are not adjacent")]
        public virtual void CheckThatTwoVerticesNotConnectedInAUndirectedGraphAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices not connected in a undirected graph are not adjacent", ((string[])(null)));
#line 537
this.ScenarioSetup(scenarioInfo);
#line 538
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 539
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table58.AddRow(new string[] {
                        "v0"});
            table58.AddRow(new string[] {
                        "v1"});
            table58.AddRow(new string[] {
                        "v2"});
            table58.AddRow(new string[] {
                        "v3"});
            table58.AddRow(new string[] {
                        "v4"});
#line 540
 testRunner.And("the vertices", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table59.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table59.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table59.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table59.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table59.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 547
 testRunner.And("the edges", ((string)(null)), table59, "And ");
#line 554
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 555
 testRunner.When("I check if the vertices \"v0\" and \"v2\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 556
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two edges who share a common vertex in a undirected graph are adjacent" +
            "")]
        public virtual void CheckThatTwoEdgesWhoShareACommonVertexInAUndirectedGraphAreAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two edges who share a common vertex in a undirected graph are adjacent" +
                    "", ((string[])(null)));
#line 558
this.ScenarioSetup(scenarioInfo);
#line 559
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 560
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table60.AddRow(new string[] {
                        "v0"});
            table60.AddRow(new string[] {
                        "v1"});
            table60.AddRow(new string[] {
                        "v2"});
            table60.AddRow(new string[] {
                        "v3"});
            table60.AddRow(new string[] {
                        "v4"});
#line 561
 testRunner.And("the vertices", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table61.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table61.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table61.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table61.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table61.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 568
 testRunner.And("the edges", ((string)(null)), table61, "And ");
#line 575
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.When("I check if the edges \"e0\" and \"e1\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices who do not share a common vertex in a undirected graph ar" +
            "e not adjacent")]
        public virtual void CheckThatTwoVerticesWhoDoNotShareACommonVertexInAUndirectedGraphAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices who do not share a common vertex in a undirected graph ar" +
                    "e not adjacent", ((string[])(null)));
#line 579
this.ScenarioSetup(scenarioInfo);
#line 580
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 581
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table62.AddRow(new string[] {
                        "v0"});
            table62.AddRow(new string[] {
                        "v1"});
            table62.AddRow(new string[] {
                        "v2"});
            table62.AddRow(new string[] {
                        "v3"});
            table62.AddRow(new string[] {
                        "v4"});
#line 582
 testRunner.And("the vertices", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table63.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table63.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table63.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table63.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table63.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 589
 testRunner.And("the edges", ((string)(null)), table63, "And ");
#line 596
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 597
 testRunner.When("I check if the edges \"e0\" and \"e2\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 598
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices with one not contains in the graph but who share a common" +
            " vertex are not adjacent")]
        public virtual void CheckThatTwoVerticesWithOneNotContainsInTheGraphButWhoShareACommonVertexAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices with one not contains in the graph but who share a common" +
                    " vertex are not adjacent", ((string[])(null)));
#line 600
this.ScenarioSetup(scenarioInfo);
#line 601
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 602
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table64.AddRow(new string[] {
                        "v0"});
            table64.AddRow(new string[] {
                        "v1"});
            table64.AddRow(new string[] {
                        "v2"});
            table64.AddRow(new string[] {
                        "v3"});
            table64.AddRow(new string[] {
                        "v4"});
#line 603
 testRunner.And("the vertices", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table65.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table65.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table65.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table65.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table65.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 610
 testRunner.And("the edges", ((string)(null)), table65, "And ");
#line 617
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 618
 testRunner.When("I check if the edge \"e0\" and the edge with the ends \"v0\" and \"v4\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 619
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
