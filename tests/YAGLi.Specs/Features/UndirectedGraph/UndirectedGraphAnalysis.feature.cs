// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs.Features.UndirectedGraph
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UndirectedGraphAnalysis")]
    public partial class UndirectedGraphAnalysisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UndirectedGraphAnalysis.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UndirectedGraphAnalysis", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
            " and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
                    " and parallel edges", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v4"});
            table2.AddRow(new string[] {
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table3.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 21
 testRunner.When("I retrieve the adjacent edges of the edge", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table4.AddRow(new string[] {
                        "v1",
                        "v4"});
            table4.AddRow(new string[] {
                        "v4",
                        "v4"});
            table4.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 24
 testRunner.Then("I get the edges", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and parallel edges", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "v0"});
            table5.AddRow(new string[] {
                        "v1"});
            table5.AddRow(new string[] {
                        "v2"});
            table5.AddRow(new string[] {
                        "v3"});
            table5.AddRow(new string[] {
                        "v4"});
#line 33
 testRunner.And("the vertices", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table6.AddRow(new string[] {
                        "v0",
                        "v1"});
            table6.AddRow(new string[] {
                        "v1",
                        "v4"});
            table6.AddRow(new string[] {
                        "v4",
                        "v4"});
            table6.AddRow(new string[] {
                        "v4",
                        "v3"});
            table6.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 40
 testRunner.And("the edges", ((string)(null)), table6, "And ");
#line 47
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "v0",
                        "v4"});
#line 48
 testRunner.When("I retrieve the adjacent edges of the edge", ((string)(null)), table7, "When ");
#line 51
 testRunner.Then("I get an empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and disallow parallel edges", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "v0"});
            table8.AddRow(new string[] {
                        "v1"});
            table8.AddRow(new string[] {
                        "v2"});
            table8.AddRow(new string[] {
                        "v3"});
            table8.AddRow(new string[] {
                        "v4"});
#line 56
 testRunner.And("the vertices", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table9.AddRow(new string[] {
                        "v0",
                        "v1"});
            table9.AddRow(new string[] {
                        "v1",
                        "v4"});
            table9.AddRow(new string[] {
                        "v4",
                        "v4"});
            table9.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 63
 testRunner.And("the edges", ((string)(null)), table9, "And ");
#line 69
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table10.AddRow(new string[] {
                        "v0",
                        "v4"});
#line 70
 testRunner.When("I retrieve the adjacent edges of the edge", ((string)(null)), table10, "When ");
#line 73
 testRunner.Then("I get an empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
            "h who allow loops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeEqualToAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
                    "h who allow loops and disallow parallel edges", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 78
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v4"});
            table12.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 85
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 91
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table13.AddRow(new string[] {
                        "v3",
                        "v4"});
#line 92
 testRunner.When("I retrieve the adjacent edges of the edge", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table14.AddRow(new string[] {
                        "v1",
                        "v4"});
            table14.AddRow(new string[] {
                        "v4",
                        "v4"});
#line 95
 testRunner.Then("I get the edges", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex contained in a UndirectedGraph", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "v0"});
            table15.AddRow(new string[] {
                        "v1"});
            table15.AddRow(new string[] {
                        "v2"});
            table15.AddRow(new string[] {
                        "v3"});
            table15.AddRow(new string[] {
                        "v4"});
#line 103
 testRunner.And("the vertices", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table16.AddRow(new string[] {
                        "v0",
                        "v1"});
            table16.AddRow(new string[] {
                        "v1",
                        "v4"});
            table16.AddRow(new string[] {
                        "v4",
                        "v4"});
            table16.AddRow(new string[] {
                        "v4",
                        "v3"});
            table16.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 110
 testRunner.And("the edges", ((string)(null)), table16, "And ");
#line 117
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.When("I retrieve the adjacent vertices of the vertex \"v1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table17.AddRow(new string[] {
                        "v0"});
            table17.AddRow(new string[] {
                        "v4"});
#line 119
 testRunner.Then("I get the vertices", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex not contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex not contained in a UndirectedGraph", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table18.AddRow(new string[] {
                        "v0"});
            table18.AddRow(new string[] {
                        "v1"});
            table18.AddRow(new string[] {
                        "v2"});
            table18.AddRow(new string[] {
                        "v3"});
            table18.AddRow(new string[] {
                        "v4"});
#line 127
 testRunner.And("the vertices", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table19.AddRow(new string[] {
                        "v0",
                        "v1"});
            table19.AddRow(new string[] {
                        "v1",
                        "v4"});
            table19.AddRow(new string[] {
                        "v4",
                        "v4"});
            table19.AddRow(new string[] {
                        "v4",
                        "v3"});
            table19.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 134
 testRunner.And("the edges", ((string)(null)), table19, "And ");
#line 141
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("I retrieve the adjacent vertices of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("I get an empty list of vertices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex not contained in the graph")]
        public virtual void GetTheDegreeOfAVertexNotContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex not contained in the graph", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "v0"});
            table20.AddRow(new string[] {
                        "v1"});
            table20.AddRow(new string[] {
                        "v2"});
            table20.AddRow(new string[] {
                        "v3"});
            table20.AddRow(new string[] {
                        "v4"});
#line 148
 testRunner.And("the vertices", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table21.AddRow(new string[] {
                        "v0",
                        "v1"});
            table21.AddRow(new string[] {
                        "v1",
                        "v4"});
            table21.AddRow(new string[] {
                        "v4",
                        "v4"});
            table21.AddRow(new string[] {
                        "v4",
                        "v3"});
            table21.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 155
 testRunner.And("the edges", ((string)(null)), table21, "And ");
#line 162
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.When("I get the degree of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("I get the degree -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex contained in the graph")]
        public virtual void GetTheDegreeOfAVertexContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex contained in the graph", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line 167
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table22.AddRow(new string[] {
                        "v0"});
            table22.AddRow(new string[] {
                        "v1"});
            table22.AddRow(new string[] {
                        "v2"});
            table22.AddRow(new string[] {
                        "v3"});
            table22.AddRow(new string[] {
                        "v4"});
#line 169
 testRunner.And("the vertices", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table23.AddRow(new string[] {
                        "v0",
                        "v1"});
            table23.AddRow(new string[] {
                        "v1",
                        "v4"});
            table23.AddRow(new string[] {
                        "v4",
                        "v4"});
            table23.AddRow(new string[] {
                        "v4",
                        "v3"});
            table23.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 176
 testRunner.And("the edges", ((string)(null)), table23, "And ");
#line 183
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.When("I get the degree of the vertex \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 185
 testRunner.Then("I get the degree 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex contained in a undirected graph", ((string[])(null)));
#line 187
this.ScenarioSetup(scenarioInfo);
#line 188
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 189
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table24.AddRow(new string[] {
                        "v0"});
            table24.AddRow(new string[] {
                        "v1"});
            table24.AddRow(new string[] {
                        "v2"});
            table24.AddRow(new string[] {
                        "v3"});
            table24.AddRow(new string[] {
                        "v4"});
#line 190
 testRunner.And("the vertices", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table25.AddRow(new string[] {
                        "v0",
                        "v1"});
            table25.AddRow(new string[] {
                        "v1",
                        "v4"});
            table25.AddRow(new string[] {
                        "v4",
                        "v4"});
            table25.AddRow(new string[] {
                        "v4",
                        "v3"});
            table25.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 197
 testRunner.And("the edges", ((string)(null)), table25, "And ");
#line 204
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("I retrieve the incident edges of the vertex \"v4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table26.AddRow(new string[] {
                        "v1",
                        "v4"});
            table26.AddRow(new string[] {
                        "v4",
                        "v4"});
            table26.AddRow(new string[] {
                        "v4",
                        "v3"});
            table26.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 206
 testRunner.Then("I get the edges", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex not contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex not contained in a undirected graph", ((string[])(null)));
#line 213
this.ScenarioSetup(scenarioInfo);
#line 214
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table27.AddRow(new string[] {
                        "v0"});
            table27.AddRow(new string[] {
                        "v1"});
            table27.AddRow(new string[] {
                        "v2"});
            table27.AddRow(new string[] {
                        "v3"});
            table27.AddRow(new string[] {
                        "v4"});
#line 216
 testRunner.And("the vertices", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table28.AddRow(new string[] {
                        "v0",
                        "v1"});
            table28.AddRow(new string[] {
                        "v1",
                        "v4"});
            table28.AddRow(new string[] {
                        "v4",
                        "v4"});
            table28.AddRow(new string[] {
                        "v4",
                        "v3"});
            table28.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 223
 testRunner.And("the edges", ((string)(null)), table28, "And ");
#line 230
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("I retrieve the incident edges of the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("I get an empty list of edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge contained in a undirected graph", ((string[])(null)));
#line 234
this.ScenarioSetup(scenarioInfo);
#line 235
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 236
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table29.AddRow(new string[] {
                        "v0"});
            table29.AddRow(new string[] {
                        "v1"});
            table29.AddRow(new string[] {
                        "v2"});
            table29.AddRow(new string[] {
                        "v3"});
            table29.AddRow(new string[] {
                        "v4"});
#line 237
 testRunner.And("the vertices", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table30.AddRow(new string[] {
                        "v0",
                        "v1"});
            table30.AddRow(new string[] {
                        "v1",
                        "v4"});
            table30.AddRow(new string[] {
                        "v4",
                        "v4"});
            table30.AddRow(new string[] {
                        "v4",
                        "v3"});
            table30.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 244
 testRunner.And("the edges", ((string)(null)), table30, "And ");
#line 251
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table31.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 252
 testRunner.When("I get the incident vertices of the edge", ((string)(null)), table31, "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table32.AddRow(new string[] {
                        "v1"});
            table32.AddRow(new string[] {
                        "v4"});
#line 255
 testRunner.Then("I get the vertices", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge not contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge not contained in a undirected graph", ((string[])(null)));
#line 260
this.ScenarioSetup(scenarioInfo);
#line 261
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 262
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table33.AddRow(new string[] {
                        "v0"});
            table33.AddRow(new string[] {
                        "v1"});
            table33.AddRow(new string[] {
                        "v2"});
            table33.AddRow(new string[] {
                        "v3"});
            table33.AddRow(new string[] {
                        "v4"});
#line 263
 testRunner.And("the vertices", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table34.AddRow(new string[] {
                        "v0",
                        "v1"});
            table34.AddRow(new string[] {
                        "v1",
                        "v4"});
            table34.AddRow(new string[] {
                        "v4",
                        "v4"});
            table34.AddRow(new string[] {
                        "v4",
                        "v3"});
            table34.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 270
 testRunner.And("the edges", ((string)(null)), table34, "And ");
#line 277
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table35.AddRow(new string[] {
                        "v0",
                        "v4"});
#line 278
 testRunner.When("I get the incident vertices of the edge", ((string)(null)), table35, "When ");
#line 281
 testRunner.Then("I get an empty list of vertices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a loop edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfALoopEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a loop edge contained in a undirected graph", ((string[])(null)));
#line 283
this.ScenarioSetup(scenarioInfo);
#line 284
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table36.AddRow(new string[] {
                        "v0"});
            table36.AddRow(new string[] {
                        "v1"});
            table36.AddRow(new string[] {
                        "v2"});
            table36.AddRow(new string[] {
                        "v3"});
            table36.AddRow(new string[] {
                        "v4"});
#line 286
 testRunner.And("the vertices", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table37.AddRow(new string[] {
                        "v0",
                        "v1"});
            table37.AddRow(new string[] {
                        "v1",
                        "v4"});
            table37.AddRow(new string[] {
                        "v4",
                        "v4"});
            table37.AddRow(new string[] {
                        "v4",
                        "v3"});
            table37.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 293
 testRunner.And("the edges", ((string)(null)), table37, "And ");
#line 300
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table38.AddRow(new string[] {
                        "v4",
                        "v4"});
#line 301
 testRunner.When("I get the incident vertices of the edge", ((string)(null)), table38, "When ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table39.AddRow(new string[] {
                        "v4"});
#line 304
 testRunner.Then("I get the vertices", ((string)(null)), table39, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph contains the expected vertex")]
        public virtual void CheckThatAUndirectedGraphContainsTheExpectedVertex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph contains the expected vertex", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table40.AddRow(new string[] {
                        "v0"});
            table40.AddRow(new string[] {
                        "v1"});
            table40.AddRow(new string[] {
                        "v2"});
            table40.AddRow(new string[] {
                        "v3"});
            table40.AddRow(new string[] {
                        "v4"});
#line 311
 testRunner.And("the vertices", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table41.AddRow(new string[] {
                        "v0",
                        "v1"});
            table41.AddRow(new string[] {
                        "v1",
                        "v4"});
            table41.AddRow(new string[] {
                        "v4",
                        "v4"});
            table41.AddRow(new string[] {
                        "v4",
                        "v3"});
            table41.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 318
 testRunner.And("the edges", ((string)(null)), table41, "And ");
#line 325
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.When("I check that the graph contains the vertex \"v0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 327
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph does not contains the expected vertex")]
        public virtual void CheckThatAUndirectedGraphDoesNotContainsTheExpectedVertex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph does not contains the expected vertex", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line 330
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 331
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table42.AddRow(new string[] {
                        "v0"});
            table42.AddRow(new string[] {
                        "v1"});
            table42.AddRow(new string[] {
                        "v2"});
            table42.AddRow(new string[] {
                        "v3"});
            table42.AddRow(new string[] {
                        "v4"});
#line 332
 testRunner.And("the vertices", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table43.AddRow(new string[] {
                        "v0",
                        "v1"});
            table43.AddRow(new string[] {
                        "v1",
                        "v4"});
            table43.AddRow(new string[] {
                        "v4",
                        "v4"});
            table43.AddRow(new string[] {
                        "v4",
                        "v3"});
            table43.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 339
 testRunner.And("the edges", ((string)(null)), table43, "And ");
#line 346
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.When("I check that the graph contains the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 348
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph contains the expected vertices")]
        public virtual void CheckThatAUndirectedGraphContainsTheExpectedVertices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph contains the expected vertices", ((string[])(null)));
#line 350
this.ScenarioSetup(scenarioInfo);
#line 351
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 352
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table44.AddRow(new string[] {
                        "v0"});
            table44.AddRow(new string[] {
                        "v1"});
            table44.AddRow(new string[] {
                        "v2"});
            table44.AddRow(new string[] {
                        "v3"});
            table44.AddRow(new string[] {
                        "v4"});
#line 353
 testRunner.And("the vertices", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table45.AddRow(new string[] {
                        "v0",
                        "v1"});
            table45.AddRow(new string[] {
                        "v1",
                        "v4"});
            table45.AddRow(new string[] {
                        "v4",
                        "v4"});
            table45.AddRow(new string[] {
                        "v4",
                        "v3"});
            table45.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 360
 testRunner.And("the edges", ((string)(null)), table45, "And ");
#line 367
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table46.AddRow(new string[] {
                        "v0"});
            table46.AddRow(new string[] {
                        "v3"});
            table46.AddRow(new string[] {
                        "v4"});
#line 368
 testRunner.When("I check that the graph contains the vertices", ((string)(null)), table46, "When ");
#line 373
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph does not contains the expected vertices")]
        public virtual void CheckThatAUndirectedGraphDoesNotContainsTheExpectedVertices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph does not contains the expected vertices", ((string[])(null)));
#line 375
this.ScenarioSetup(scenarioInfo);
#line 376
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 377
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table47.AddRow(new string[] {
                        "v0"});
            table47.AddRow(new string[] {
                        "v1"});
            table47.AddRow(new string[] {
                        "v2"});
            table47.AddRow(new string[] {
                        "v3"});
            table47.AddRow(new string[] {
                        "v4"});
#line 378
 testRunner.And("the vertices", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table48.AddRow(new string[] {
                        "v0",
                        "v1"});
            table48.AddRow(new string[] {
                        "v1",
                        "v4"});
            table48.AddRow(new string[] {
                        "v4",
                        "v4"});
            table48.AddRow(new string[] {
                        "v4",
                        "v3"});
            table48.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 385
 testRunner.And("the edges", ((string)(null)), table48, "And ");
#line 392
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table49.AddRow(new string[] {
                        "v0"});
            table49.AddRow(new string[] {
                        "v3"});
            table49.AddRow(new string[] {
                        "v4"});
            table49.AddRow(new string[] {
                        "v5"});
#line 393
 testRunner.When("I check that the graph contains the vertices", ((string)(null)), table49, "When ");
#line 399
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains a edge")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsAEdge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains a edge", ((string[])(null)));
#line 401
this.ScenarioSetup(scenarioInfo);
#line 402
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 403
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table50.AddRow(new string[] {
                        "v0"});
            table50.AddRow(new string[] {
                        "v1"});
            table50.AddRow(new string[] {
                        "v2"});
            table50.AddRow(new string[] {
                        "v3"});
            table50.AddRow(new string[] {
                        "v4"});
#line 404
 testRunner.And("the vertices", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table51.AddRow(new string[] {
                        "v0",
                        "v1"});
            table51.AddRow(new string[] {
                        "v1",
                        "v4"});
            table51.AddRow(new string[] {
                        "v4",
                        "v4"});
            table51.AddRow(new string[] {
                        "v4",
                        "v3"});
            table51.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 411
 testRunner.And("the edges", ((string)(null)), table51, "And ");
#line 418
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table52.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 419
 testRunner.When("I check that the graph contains the edge", ((string)(null)), table52, "When ");
#line 422
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains a edge with the s" +
            "ame ends")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsAEdgeWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains a edge with the s" +
                    "ame ends", ((string[])(null)));
#line 424
this.ScenarioSetup(scenarioInfo);
#line 425
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 426
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table53.AddRow(new string[] {
                        "v0"});
            table53.AddRow(new string[] {
                        "v1"});
            table53.AddRow(new string[] {
                        "v2"});
            table53.AddRow(new string[] {
                        "v3"});
            table53.AddRow(new string[] {
                        "v4"});
#line 427
 testRunner.And("the vertices", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table54.AddRow(new string[] {
                        "v0",
                        "v1"});
            table54.AddRow(new string[] {
                        "v1",
                        "v4"});
            table54.AddRow(new string[] {
                        "v4",
                        "v4"});
            table54.AddRow(new string[] {
                        "v4",
                        "v3"});
            table54.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 434
 testRunner.And("the edges", ((string)(null)), table54, "And ");
#line 441
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table55.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 442
 testRunner.When("I check that the graph contains the edge", ((string)(null)), table55, "When ");
#line 445
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who disallow parallel edges contains a edge with th" +
            "e same ends")]
        public virtual void CheckThatAUndirectedGraphWhoDisallowParallelEdgesContainsAEdgeWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who disallow parallel edges contains a edge with th" +
                    "e same ends", ((string[])(null)));
#line 447
this.ScenarioSetup(scenarioInfo);
#line 448
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 449
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table56.AddRow(new string[] {
                        "v0"});
            table56.AddRow(new string[] {
                        "v1"});
            table56.AddRow(new string[] {
                        "v2"});
            table56.AddRow(new string[] {
                        "v3"});
            table56.AddRow(new string[] {
                        "v4"});
#line 450
 testRunner.And("the vertices", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table57.AddRow(new string[] {
                        "v0",
                        "v1"});
            table57.AddRow(new string[] {
                        "v1",
                        "v4"});
            table57.AddRow(new string[] {
                        "v4",
                        "v4"});
            table57.AddRow(new string[] {
                        "v4",
                        "v3"});
            table57.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 457
 testRunner.And("the edges", ((string)(null)), table57, "And ");
#line 464
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table58.AddRow(new string[] {
                        "v0",
                        "v1"});
#line 465
 testRunner.When("I check that the graph contains the edge", ((string)(null)), table58, "When ");
#line 468
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges contains edges")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesContainsEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges contains edges", ((string[])(null)));
#line 470
this.ScenarioSetup(scenarioInfo);
#line 471
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 472
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table59.AddRow(new string[] {
                        "v0"});
            table59.AddRow(new string[] {
                        "v1"});
            table59.AddRow(new string[] {
                        "v2"});
            table59.AddRow(new string[] {
                        "v3"});
            table59.AddRow(new string[] {
                        "v4"});
#line 473
 testRunner.And("the vertices", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table60.AddRow(new string[] {
                        "v0",
                        "v1"});
            table60.AddRow(new string[] {
                        "v1",
                        "v4"});
            table60.AddRow(new string[] {
                        "v4",
                        "v4"});
            table60.AddRow(new string[] {
                        "v4",
                        "v3"});
            table60.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 480
 testRunner.And("the edges", ((string)(null)), table60, "And ");
#line 487
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table61.AddRow(new string[] {
                        "v0",
                        "v1"});
            table61.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 488
 testRunner.When("I check that the graph contains the edges", ((string)(null)), table61, "When ");
#line 492
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who allow parallel edges does not contains edges wi" +
            "th the same ends")]
        public virtual void CheckThatAUndirectedGraphWhoAllowParallelEdgesDoesNotContainsEdgesWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who allow parallel edges does not contains edges wi" +
                    "th the same ends", ((string[])(null)));
#line 494
this.ScenarioSetup(scenarioInfo);
#line 495
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 496
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table62.AddRow(new string[] {
                        "v0"});
            table62.AddRow(new string[] {
                        "v1"});
            table62.AddRow(new string[] {
                        "v2"});
            table62.AddRow(new string[] {
                        "v3"});
            table62.AddRow(new string[] {
                        "v4"});
#line 497
 testRunner.And("the vertices", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table63.AddRow(new string[] {
                        "v0",
                        "v1"});
            table63.AddRow(new string[] {
                        "v1",
                        "v4"});
            table63.AddRow(new string[] {
                        "v4",
                        "v4"});
            table63.AddRow(new string[] {
                        "v4",
                        "v3"});
            table63.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 504
 testRunner.And("the edges", ((string)(null)), table63, "And ");
#line 511
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table64.AddRow(new string[] {
                        "v0",
                        "v1"});
            table64.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 512
 testRunner.When("I check that the graph contains the edges", ((string)(null)), table64, "When ");
#line 516
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that a undirected graph who disallow parallel edges contains edges with the" +
            " same ends")]
        public virtual void CheckThatAUndirectedGraphWhoDisallowParallelEdgesContainsEdgesWithTheSameEnds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that a undirected graph who disallow parallel edges contains edges with the" +
                    " same ends", ((string[])(null)));
#line 518
this.ScenarioSetup(scenarioInfo);
#line 519
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 520
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table65.AddRow(new string[] {
                        "v0"});
            table65.AddRow(new string[] {
                        "v1"});
            table65.AddRow(new string[] {
                        "v2"});
            table65.AddRow(new string[] {
                        "v3"});
            table65.AddRow(new string[] {
                        "v4"});
#line 521
 testRunner.And("the vertices", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table66.AddRow(new string[] {
                        "v0",
                        "v1"});
            table66.AddRow(new string[] {
                        "v1",
                        "v4"});
            table66.AddRow(new string[] {
                        "v4",
                        "v4"});
            table66.AddRow(new string[] {
                        "v4",
                        "v3"});
            table66.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 528
 testRunner.And("the edges", ((string)(null)), table66, "And ");
#line 535
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table67.AddRow(new string[] {
                        "v0",
                        "v1"});
            table67.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 536
 testRunner.When("I check that the graph contains the edges", ((string)(null)), table67, "When ");
#line 540
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices connected in a undirected graph are adjacent")]
        public virtual void CheckThatTwoVerticesConnectedInAUndirectedGraphAreAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices connected in a undirected graph are adjacent", ((string[])(null)));
#line 542
this.ScenarioSetup(scenarioInfo);
#line 543
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 544
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table68.AddRow(new string[] {
                        "v0"});
            table68.AddRow(new string[] {
                        "v1"});
            table68.AddRow(new string[] {
                        "v2"});
            table68.AddRow(new string[] {
                        "v3"});
            table68.AddRow(new string[] {
                        "v4"});
#line 545
 testRunner.And("the vertices", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table69.AddRow(new string[] {
                        "v0",
                        "v1"});
            table69.AddRow(new string[] {
                        "v1",
                        "v4"});
            table69.AddRow(new string[] {
                        "v4",
                        "v4"});
            table69.AddRow(new string[] {
                        "v4",
                        "v3"});
            table69.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 552
 testRunner.And("the edges", ((string)(null)), table69, "And ");
#line 559
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 560
 testRunner.When("I check if the vertices \"v0\" and \"v1\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 561
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices not connected in a undirected graph are not adjacent")]
        public virtual void CheckThatTwoVerticesNotConnectedInAUndirectedGraphAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices not connected in a undirected graph are not adjacent", ((string[])(null)));
#line 563
this.ScenarioSetup(scenarioInfo);
#line 564
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 565
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table70.AddRow(new string[] {
                        "v0"});
            table70.AddRow(new string[] {
                        "v1"});
            table70.AddRow(new string[] {
                        "v2"});
            table70.AddRow(new string[] {
                        "v3"});
            table70.AddRow(new string[] {
                        "v4"});
#line 566
 testRunner.And("the vertices", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table71.AddRow(new string[] {
                        "v0",
                        "v1"});
            table71.AddRow(new string[] {
                        "v1",
                        "v4"});
            table71.AddRow(new string[] {
                        "v4",
                        "v4"});
            table71.AddRow(new string[] {
                        "v4",
                        "v3"});
            table71.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 573
 testRunner.And("the edges", ((string)(null)), table71, "And ");
#line 580
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 581
 testRunner.When("I check if the vertices \"v0\" and \"v2\" are adjacent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 582
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two edges who share a common vertex in a undirected graph are adjacent" +
            "")]
        public virtual void CheckThatTwoEdgesWhoShareACommonVertexInAUndirectedGraphAreAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two edges who share a common vertex in a undirected graph are adjacent" +
                    "", ((string[])(null)));
#line 584
this.ScenarioSetup(scenarioInfo);
#line 585
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 586
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table72.AddRow(new string[] {
                        "v0"});
            table72.AddRow(new string[] {
                        "v1"});
            table72.AddRow(new string[] {
                        "v2"});
            table72.AddRow(new string[] {
                        "v3"});
            table72.AddRow(new string[] {
                        "v4"});
#line 587
 testRunner.And("the vertices", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table73.AddRow(new string[] {
                        "v0",
                        "v1"});
            table73.AddRow(new string[] {
                        "v1",
                        "v4"});
            table73.AddRow(new string[] {
                        "v4",
                        "v4"});
            table73.AddRow(new string[] {
                        "v4",
                        "v3"});
            table73.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 594
 testRunner.And("the edges", ((string)(null)), table73, "And ");
#line 601
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table74.AddRow(new string[] {
                        "v0",
                        "v1"});
            table74.AddRow(new string[] {
                        "v1",
                        "v4"});
#line 602
 testRunner.When("I check if the following edges are adjacent", ((string)(null)), table74, "When ");
#line 606
 testRunner.Then("I get the answer true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices who do not share a common vertex in a undirected graph ar" +
            "e not adjacent")]
        public virtual void CheckThatTwoVerticesWhoDoNotShareACommonVertexInAUndirectedGraphAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices who do not share a common vertex in a undirected graph ar" +
                    "e not adjacent", ((string[])(null)));
#line 608
this.ScenarioSetup(scenarioInfo);
#line 609
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 610
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table75.AddRow(new string[] {
                        "v0"});
            table75.AddRow(new string[] {
                        "v1"});
            table75.AddRow(new string[] {
                        "v2"});
            table75.AddRow(new string[] {
                        "v3"});
            table75.AddRow(new string[] {
                        "v4"});
#line 611
 testRunner.And("the vertices", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table76.AddRow(new string[] {
                        "v0",
                        "v1"});
            table76.AddRow(new string[] {
                        "v1",
                        "v4"});
            table76.AddRow(new string[] {
                        "v4",
                        "v4"});
            table76.AddRow(new string[] {
                        "v4",
                        "v3"});
            table76.AddRow(new string[] {
                        "v4",
                        "v3"});
#line 618
 testRunner.And("the edges", ((string)(null)), table76, "And ");
#line 625
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table77.AddRow(new string[] {
                        "v0",
                        "v1"});
            table77.AddRow(new string[] {
                        "v4",
                        "v4"});
#line 626
 testRunner.When("I check if the following edges are adjacent", ((string)(null)), table77, "When ");
#line 630
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that two vertices with one not contains in the graph but who share a common" +
            " vertex are not adjacent")]
        public virtual void CheckThatTwoVerticesWithOneNotContainsInTheGraphButWhoShareACommonVertexAreNotAdjacent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that two vertices with one not contains in the graph but who share a common" +
                    " vertex are not adjacent", ((string[])(null)));
#line 632
this.ScenarioSetup(scenarioInfo);
#line 633
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 634
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table78.AddRow(new string[] {
                        "v0"});
            table78.AddRow(new string[] {
                        "v1"});
            table78.AddRow(new string[] {
                        "v2"});
            table78.AddRow(new string[] {
                        "v3"});
            table78.AddRow(new string[] {
                        "v4"});
#line 635
 testRunner.And("the vertices", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table79.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table79.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table79.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table79.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table79.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 642
 testRunner.And("the edges", ((string)(null)), table79, "And ");
#line 649
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "End1",
                        "End2"});
            table80.AddRow(new string[] {
                        "v0",
                        "v1"});
            table80.AddRow(new string[] {
                        "v0",
                        "v4"});
#line 650
 testRunner.When("I check if the following edges are adjacent", ((string)(null)), table80, "When ");
#line 654
 testRunner.Then("I get the answer false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
