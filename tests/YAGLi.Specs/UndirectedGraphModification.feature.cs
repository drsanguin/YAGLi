// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UndirectedGraphModification")]
    public partial class UndirectedGraphModificationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UndirectedGraphModification.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UndirectedGraphModification", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a loop to a undirected graph who disallow loops")]
        public virtual void AddALoopToAUndirectedGraphWhoDisallowLoops()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a loop to a undirected graph who disallow loops", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property disallow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 19
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table3.AddRow(new string[] {
                        "e5",
                        "v0",
                        "v0"});
#line 20
 testRunner.When("I add the edges", ((string)(null)), table3, "When ");
#line 23
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 24
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "e0"});
            table5.AddRow(new string[] {
                        "e1"});
            table5.AddRow(new string[] {
                        "e3"});
            table5.AddRow(new string[] {
                        "e4"});
#line 31
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a parallel edge to a undirected graph who disallow parallel edges")]
        public virtual void AddAParallelEdgeToAUndirectedGraphWhoDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a parallel edge to a undirected graph who disallow parallel edges", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 41
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 48
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 53
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table8.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 54
 testRunner.When("I add the edges", ((string)(null)), table8, "When ");
#line 57
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "v0"});
            table9.AddRow(new string[] {
                        "v1"});
            table9.AddRow(new string[] {
                        "v2"});
            table9.AddRow(new string[] {
                        "v3"});
            table9.AddRow(new string[] {
                        "v4"});
#line 58
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table10.AddRow(new string[] {
                        "e0"});
            table10.AddRow(new string[] {
                        "e1"});
            table10.AddRow(new string[] {
                        "e3"});
#line 65
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a loop to a undirected graph")]
        public virtual void AddALoopToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a loop to a undirected graph", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 74
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 81
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 87
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table13.AddRow(new string[] {
                        "e5",
                        "v0",
                        "v0"});
#line 88
 testRunner.When("I add the edges", ((string)(null)), table13, "When ");
#line 91
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 92
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "e0"});
            table15.AddRow(new string[] {
                        "e1"});
            table15.AddRow(new string[] {
                        "e3"});
            table15.AddRow(new string[] {
                        "e4"});
            table15.AddRow(new string[] {
                        "e5"});
#line 99
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a parallel edge to a undirected graph")]
        public virtual void AddAParallelEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a parallel edge to a undirected graph", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 109
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 110
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 117
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 122
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table18.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 123
 testRunner.When("I add the edges", ((string)(null)), table18, "When ");
#line 126
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "v0"});
            table19.AddRow(new string[] {
                        "v1"});
            table19.AddRow(new string[] {
                        "v2"});
            table19.AddRow(new string[] {
                        "v3"});
            table19.AddRow(new string[] {
                        "v4"});
#line 127
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "e0"});
            table20.AddRow(new string[] {
                        "e1"});
            table20.AddRow(new string[] {
                        "e3"});
            table20.AddRow(new string[] {
                        "e4"});
#line 134
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a edge to a undirected graph")]
        public virtual void AddAEdgeToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a edge to a undirected graph", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table21.AddRow(new string[] {
                        "v0"});
            table21.AddRow(new string[] {
                        "v1"});
            table21.AddRow(new string[] {
                        "v2"});
            table21.AddRow(new string[] {
                        "v3"});
            table21.AddRow(new string[] {
                        "v4"});
#line 144
 testRunner.And("the vertices", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table22.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table22.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table22.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table22.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 151
 testRunner.And("the edges", ((string)(null)), table22, "And ");
#line 157
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I add the edge \"e5\" with the ends \"v0\" and \"v2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table23.AddRow(new string[] {
                        "v0"});
            table23.AddRow(new string[] {
                        "v1"});
            table23.AddRow(new string[] {
                        "v2"});
            table23.AddRow(new string[] {
                        "v3"});
            table23.AddRow(new string[] {
                        "v4"});
#line 160
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table24.AddRow(new string[] {
                        "e0"});
            table24.AddRow(new string[] {
                        "e1"});
            table24.AddRow(new string[] {
                        "e3"});
            table24.AddRow(new string[] {
                        "e4"});
            table24.AddRow(new string[] {
                        "e5"});
#line 167
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edges to a undirected graph")]
        public virtual void AddEdgesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edges to a undirected graph", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table25.AddRow(new string[] {
                        "v0"});
            table25.AddRow(new string[] {
                        "v1"});
            table25.AddRow(new string[] {
                        "v2"});
            table25.AddRow(new string[] {
                        "v3"});
            table25.AddRow(new string[] {
                        "v4"});
#line 178
 testRunner.And("the vertices", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table26.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table26.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table26.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table26.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 185
 testRunner.And("the edges", ((string)(null)), table26, "And ");
#line 191
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table27.AddRow(new string[] {
                        "e5",
                        "v0",
                        "v2"});
            table27.AddRow(new string[] {
                        "e6",
                        "v1",
                        "v2"});
#line 192
 testRunner.When("I add the edges", ((string)(null)), table27, "When ");
#line 196
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table28.AddRow(new string[] {
                        "v0"});
            table28.AddRow(new string[] {
                        "v1"});
            table28.AddRow(new string[] {
                        "v2"});
            table28.AddRow(new string[] {
                        "v3"});
            table28.AddRow(new string[] {
                        "v4"});
#line 197
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table29.AddRow(new string[] {
                        "e0"});
            table29.AddRow(new string[] {
                        "e1"});
            table29.AddRow(new string[] {
                        "e3"});
            table29.AddRow(new string[] {
                        "e4"});
            table29.AddRow(new string[] {
                        "e5"});
            table29.AddRow(new string[] {
                        "e6"});
#line 204
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table29, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a edge with vertices who are not already contained in a undirected graph")]
        public virtual void AddAEdgeWithVerticesWhoAreNotAlreadyContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a edge with vertices who are not already contained in a undirected graph", ((string[])(null)));
#line 213
this.ScenarioSetup(scenarioInfo);
#line 214
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table30.AddRow(new string[] {
                        "v0"});
            table30.AddRow(new string[] {
                        "v1"});
            table30.AddRow(new string[] {
                        "v2"});
            table30.AddRow(new string[] {
                        "v3"});
            table30.AddRow(new string[] {
                        "v4"});
#line 216
 testRunner.And("the vertices", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table31.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table31.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table31.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table31.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 223
 testRunner.And("the edges", ((string)(null)), table31, "And ");
#line 229
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.When("I add the edge \"e5\" with the ends \"v5\" and \"v6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table32.AddRow(new string[] {
                        "v0"});
            table32.AddRow(new string[] {
                        "v1"});
            table32.AddRow(new string[] {
                        "v2"});
            table32.AddRow(new string[] {
                        "v3"});
            table32.AddRow(new string[] {
                        "v4"});
#line 232
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table33.AddRow(new string[] {
                        "e0"});
            table33.AddRow(new string[] {
                        "e1"});
            table33.AddRow(new string[] {
                        "e3"});
            table33.AddRow(new string[] {
                        "e4"});
#line 239
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a vertex to a undirected graph")]
        public virtual void AddAVertexToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a vertex to a undirected graph", ((string[])(null)));
#line 246
this.ScenarioSetup(scenarioInfo);
#line 247
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table34.AddRow(new string[] {
                        "v0"});
            table34.AddRow(new string[] {
                        "v1"});
            table34.AddRow(new string[] {
                        "v2"});
            table34.AddRow(new string[] {
                        "v3"});
            table34.AddRow(new string[] {
                        "v4"});
#line 249
 testRunner.And("the vertices", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table35.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table35.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table35.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table35.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 256
 testRunner.And("the edges", ((string)(null)), table35, "And ");
#line 262
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
 testRunner.When("I add the vertex \"v5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 264
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table36.AddRow(new string[] {
                        "v0"});
            table36.AddRow(new string[] {
                        "v1"});
            table36.AddRow(new string[] {
                        "v2"});
            table36.AddRow(new string[] {
                        "v3"});
            table36.AddRow(new string[] {
                        "v4"});
            table36.AddRow(new string[] {
                        "v5"});
#line 265
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table37.AddRow(new string[] {
                        "e0"});
            table37.AddRow(new string[] {
                        "e1"});
            table37.AddRow(new string[] {
                        "e3"});
            table37.AddRow(new string[] {
                        "e4"});
#line 273
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add vertices to a undirected graph")]
        public virtual void AddVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add vertices to a undirected graph", ((string[])(null)));
#line 280
this.ScenarioSetup(scenarioInfo);
#line 281
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 282
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table38.AddRow(new string[] {
                        "v0"});
            table38.AddRow(new string[] {
                        "v1"});
            table38.AddRow(new string[] {
                        "v2"});
            table38.AddRow(new string[] {
                        "v3"});
            table38.AddRow(new string[] {
                        "v4"});
#line 283
 testRunner.And("the vertices", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table39.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table39.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table39.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table39.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 290
 testRunner.And("the edges", ((string)(null)), table39, "And ");
#line 296
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table40.AddRow(new string[] {
                        "v5"});
            table40.AddRow(new string[] {
                        "v6"});
#line 297
 testRunner.When("I add the vertices", ((string)(null)), table40, "When ");
#line 301
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table41.AddRow(new string[] {
                        "v0"});
            table41.AddRow(new string[] {
                        "v1"});
            table41.AddRow(new string[] {
                        "v2"});
            table41.AddRow(new string[] {
                        "v3"});
            table41.AddRow(new string[] {
                        "v4"});
            table41.AddRow(new string[] {
                        "v5"});
            table41.AddRow(new string[] {
                        "v6"});
#line 302
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table42.AddRow(new string[] {
                        "e0"});
            table42.AddRow(new string[] {
                        "e1"});
            table42.AddRow(new string[] {
                        "e3"});
            table42.AddRow(new string[] {
                        "e4"});
#line 311
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edge and vertices to a undirected graph")]
        public virtual void AddEdgeAndVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edge and vertices to a undirected graph", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table43.AddRow(new string[] {
                        "v0"});
            table43.AddRow(new string[] {
                        "v1"});
            table43.AddRow(new string[] {
                        "v2"});
            table43.AddRow(new string[] {
                        "v3"});
            table43.AddRow(new string[] {
                        "v4"});
#line 321
 testRunner.And("the vertices", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table44.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table44.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table44.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table44.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 328
 testRunner.And("the edges", ((string)(null)), table44, "And ");
#line 334
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.When("I add the edge \"e5\" with the vertices \"v5\" and \"v6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table45.AddRow(new string[] {
                        "v0"});
            table45.AddRow(new string[] {
                        "v1"});
            table45.AddRow(new string[] {
                        "v2"});
            table45.AddRow(new string[] {
                        "v3"});
            table45.AddRow(new string[] {
                        "v4"});
            table45.AddRow(new string[] {
                        "v5"});
            table45.AddRow(new string[] {
                        "v6"});
#line 337
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table46.AddRow(new string[] {
                        "e0"});
            table46.AddRow(new string[] {
                        "e1"});
            table46.AddRow(new string[] {
                        "e3"});
            table46.AddRow(new string[] {
                        "e4"});
            table46.AddRow(new string[] {
                        "e5"});
#line 346
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add edges and vertices to a undirected graph")]
        public virtual void AddEdgesAndVerticesToAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add edges and vertices to a undirected graph", ((string[])(null)));
#line 354
this.ScenarioSetup(scenarioInfo);
#line 355
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 356
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table47.AddRow(new string[] {
                        "v0"});
            table47.AddRow(new string[] {
                        "v1"});
            table47.AddRow(new string[] {
                        "v2"});
            table47.AddRow(new string[] {
                        "v3"});
            table47.AddRow(new string[] {
                        "v4"});
#line 357
 testRunner.And("the vertices", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table48.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table48.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table48.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table48.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 364
 testRunner.And("the edges", ((string)(null)), table48, "And ");
#line 370
 testRunner.And("the undirected graph created with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table49.AddRow(new string[] {
                        "e5",
                        "v5",
                        "v6"});
            table49.AddRow(new string[] {
                        "e6",
                        "v0",
                        "v7"});
#line 371
 testRunner.When("I add the edges and vertices", ((string)(null)), table49, "When ");
#line 375
 testRunner.Then("I should get a new undirected graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table50.AddRow(new string[] {
                        "v0"});
            table50.AddRow(new string[] {
                        "v1"});
            table50.AddRow(new string[] {
                        "v2"});
            table50.AddRow(new string[] {
                        "v3"});
            table50.AddRow(new string[] {
                        "v4"});
            table50.AddRow(new string[] {
                        "v5"});
            table50.AddRow(new string[] {
                        "v6"});
            table50.AddRow(new string[] {
                        "v7"});
#line 376
 testRunner.And("this new undirected graph should contains the vertices", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table51.AddRow(new string[] {
                        "e0"});
            table51.AddRow(new string[] {
                        "e1"});
            table51.AddRow(new string[] {
                        "e3"});
            table51.AddRow(new string[] {
                        "e4"});
            table51.AddRow(new string[] {
                        "e5"});
            table51.AddRow(new string[] {
                        "e6"});
#line 386
 testRunner.And("this new undirected graph should contains the edges", ((string)(null)), table51, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
