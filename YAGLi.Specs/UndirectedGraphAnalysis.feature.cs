// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YAGLi.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UndirectedGraphAnalysis")]
    public partial class UndirectedGraphAnalysisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UndirectedGraphAnalysis.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UndirectedGraphAnalysis", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
            " and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge located into a undirected graph who allow loops" +
                    " and parallel edges", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "v0"});
            table1.AddRow(new string[] {
                        "v1"});
            table1.AddRow(new string[] {
                        "v2"});
            table1.AddRow(new string[] {
                        "v3"});
            table1.AddRow(new string[] {
                        "v4"});
#line 6
 testRunner.And("the vertices", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table2.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table2.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table2.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table2.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table2.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 13
 testRunner.And("the edges", ((string)(null)), table2, "And ");
#line 20
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "e1"});
            table3.AddRow(new string[] {
                        "e2"});
            table3.AddRow(new string[] {
                        "e4"});
#line 21
 testRunner.Then("the adjacent edges of the edge \"e3\" should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and parallel edges", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "v0"});
            table4.AddRow(new string[] {
                        "v1"});
            table4.AddRow(new string[] {
                        "v2"});
            table4.AddRow(new string[] {
                        "v3"});
            table4.AddRow(new string[] {
                        "v4"});
#line 30
 testRunner.And("the vertices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table5.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table5.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table5.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table5.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table5.AddRow(new string[] {
                        "e4",
                        "v3",
                        "v4"});
#line 37
 testRunner.And("the edges", ((string)(null)), table5, "And ");
#line 44
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("the adjacent edges of the edge with the ends \"v0\" and \"v4\" should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
            "oops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeNotLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge not located into a undirected graph who allow l" +
                    "oops and disallow parallel edges", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "v0"});
            table6.AddRow(new string[] {
                        "v1"});
            table6.AddRow(new string[] {
                        "v2"});
            table6.AddRow(new string[] {
                        "v3"});
            table6.AddRow(new string[] {
                        "v4"});
#line 50
 testRunner.And("the vertices", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table7.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table7.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table7.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table7.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 57
 testRunner.And("the edges", ((string)(null)), table7, "And ");
#line 63
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then("the adjacent edges of the edge with the ends \"v0\" and \"v4\" should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
            "h who allow loops and disallow parallel edges")]
        public virtual void GetTheAdjacentEdgesOfAnEdgeEqualToAnEdgeLocatedIntoAUndirectedGraphWhoAllowLoopsAndDisallowParallelEdges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent edges of an edge equal to an edge located into a undirected grap" +
                    "h who allow loops and disallow parallel edges", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.And("the property disallow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "v0"});
            table8.AddRow(new string[] {
                        "v1"});
            table8.AddRow(new string[] {
                        "v2"});
            table8.AddRow(new string[] {
                        "v3"});
            table8.AddRow(new string[] {
                        "v4"});
#line 69
 testRunner.And("the vertices", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table9.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table9.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table9.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table9.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
#line 76
 testRunner.And("the edges", ((string)(null)), table9, "And ");
#line 82
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table10.AddRow(new string[] {
                        "e1"});
            table10.AddRow(new string[] {
                        "e2"});
#line 83
 testRunner.Then("the adjacent edges of the edge with the ends \"v3\" and \"v4\" should be", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex contained in a UndirectedGraph", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "v0"});
            table11.AddRow(new string[] {
                        "v1"});
            table11.AddRow(new string[] {
                        "v2"});
            table11.AddRow(new string[] {
                        "v3"});
            table11.AddRow(new string[] {
                        "v4"});
#line 91
 testRunner.And("the vertices", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table12.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table12.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table12.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table12.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table12.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 98
 testRunner.And("the edges", ((string)(null)), table12, "And ");
#line 105
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "v0"});
            table13.AddRow(new string[] {
                        "v4"});
#line 106
 testRunner.Then("the adjacent vertices of the vertex \"v1\" should be", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the adjacent vertices of a vertex not contained in a UndirectedGraph")]
        public virtual void GetTheAdjacentVerticesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the adjacent vertices of a vertex not contained in a UndirectedGraph", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "v0"});
            table14.AddRow(new string[] {
                        "v1"});
            table14.AddRow(new string[] {
                        "v2"});
            table14.AddRow(new string[] {
                        "v3"});
            table14.AddRow(new string[] {
                        "v4"});
#line 114
 testRunner.And("the vertices", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table15.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table15.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table15.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table15.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table15.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 121
 testRunner.And("the edges", ((string)(null)), table15, "And ");
#line 128
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.Then("the adjacent vertices of the vertex \"v5\" should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex not contained in the graph")]
        public virtual void GetTheDegreeOfAVertexNotContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex not contained in the graph", ((string[])(null)));
#line 131
this.ScenarioSetup(scenarioInfo);
#line 132
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "v0"});
            table16.AddRow(new string[] {
                        "v1"});
            table16.AddRow(new string[] {
                        "v2"});
            table16.AddRow(new string[] {
                        "v3"});
            table16.AddRow(new string[] {
                        "v4"});
#line 134
 testRunner.And("the vertices", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table17.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table17.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table17.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table17.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table17.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 141
 testRunner.And("the edges", ((string)(null)), table17, "And ");
#line 148
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("the degree of the vertex \"v5\" should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the degree of a vertex contained in the graph")]
        public virtual void GetTheDegreeOfAVertexContainedInTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the degree of a vertex contained in the graph", ((string[])(null)));
#line 151
this.ScenarioSetup(scenarioInfo);
#line 152
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 153
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table18.AddRow(new string[] {
                        "v0"});
            table18.AddRow(new string[] {
                        "v1"});
            table18.AddRow(new string[] {
                        "v2"});
            table18.AddRow(new string[] {
                        "v3"});
            table18.AddRow(new string[] {
                        "v4"});
#line 154
 testRunner.And("the vertices", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table19.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table19.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table19.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table19.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table19.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 161
 testRunner.And("the edges", ((string)(null)), table19, "And ");
#line 168
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("the degree of the vertex \"v4\" should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex contained in a undirected graph", ((string[])(null)));
#line 171
this.ScenarioSetup(scenarioInfo);
#line 172
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 173
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "v0"});
            table20.AddRow(new string[] {
                        "v1"});
            table20.AddRow(new string[] {
                        "v2"});
            table20.AddRow(new string[] {
                        "v3"});
            table20.AddRow(new string[] {
                        "v4"});
#line 174
 testRunner.And("the vertices", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table21.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table21.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table21.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table21.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table21.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 181
 testRunner.And("the edges", ((string)(null)), table21, "And ");
#line 188
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table22.AddRow(new string[] {
                        "e1"});
            table22.AddRow(new string[] {
                        "e2"});
            table22.AddRow(new string[] {
                        "e3"});
            table22.AddRow(new string[] {
                        "e4"});
#line 189
 testRunner.Then("the incident edges of the vertex \"v4\" should be", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident edges of a vertex not contained in a undirected graph")]
        public virtual void GetTheIncidentEdgesOfAVertexNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident edges of a vertex not contained in a undirected graph", ((string[])(null)));
#line 196
this.ScenarioSetup(scenarioInfo);
#line 197
 testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 198
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table23.AddRow(new string[] {
                        "v0"});
            table23.AddRow(new string[] {
                        "v1"});
            table23.AddRow(new string[] {
                        "v2"});
            table23.AddRow(new string[] {
                        "v3"});
            table23.AddRow(new string[] {
                        "v4"});
#line 199
 testRunner.And("the vertices", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table24.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table24.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table24.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table24.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table24.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 206
 testRunner.And("the edges", ((string)(null)), table24, "And ");
#line 213
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.Then("the incident edges of the vertex \"v5\" should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge contained in a undirected graph", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table25.AddRow(new string[] {
                        "v0"});
            table25.AddRow(new string[] {
                        "v1"});
            table25.AddRow(new string[] {
                        "v2"});
            table25.AddRow(new string[] {
                        "v3"});
            table25.AddRow(new string[] {
                        "v4"});
#line 219
 testRunner.And("the vertices", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table26.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table26.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table26.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table26.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table26.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 226
 testRunner.And("the edges", ((string)(null)), table26, "And ");
#line 233
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table27.AddRow(new string[] {
                        "v1"});
            table27.AddRow(new string[] {
                        "v4"});
#line 234
 testRunner.Then("the incident vertices of the edge \"e1\" should be", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a edge not contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfAEdgeNotContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a edge not contained in a undirected graph", ((string[])(null)));
#line 239
this.ScenarioSetup(scenarioInfo);
#line 240
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 241
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table28.AddRow(new string[] {
                        "v0"});
            table28.AddRow(new string[] {
                        "v1"});
            table28.AddRow(new string[] {
                        "v2"});
            table28.AddRow(new string[] {
                        "v3"});
            table28.AddRow(new string[] {
                        "v4"});
#line 242
 testRunner.And("the vertices", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table29.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table29.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table29.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table29.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table29.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 249
 testRunner.And("the edges", ((string)(null)), table29, "And ");
#line 256
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 257
 testRunner.Then("the incident vertices of the edge with the ends \"v0\" and \"v4\" should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the incident vertices of a loop edge contained in a undirected graph")]
        public virtual void GetTheIncidentVerticesOfALoopEdgeContainedInAUndirectedGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the incident vertices of a loop edge contained in a undirected graph", ((string[])(null)));
#line 259
this.ScenarioSetup(scenarioInfo);
#line 260
testRunner.Given("the property allow loops", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
 testRunner.And("the property allow parallel edges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table30.AddRow(new string[] {
                        "v0"});
            table30.AddRow(new string[] {
                        "v1"});
            table30.AddRow(new string[] {
                        "v2"});
            table30.AddRow(new string[] {
                        "v3"});
            table30.AddRow(new string[] {
                        "v4"});
#line 262
 testRunner.And("the vertices", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "End1",
                        "End2"});
            table31.AddRow(new string[] {
                        "e0",
                        "v0",
                        "v1"});
            table31.AddRow(new string[] {
                        "e1",
                        "v1",
                        "v4"});
            table31.AddRow(new string[] {
                        "e2",
                        "v4",
                        "v4"});
            table31.AddRow(new string[] {
                        "e3",
                        "v4",
                        "v3"});
            table31.AddRow(new string[] {
                        "e4",
                        "v4",
                        "v3"});
#line 269
 testRunner.And("the edges", ((string)(null)), table31, "And ");
#line 276
 testRunner.When("I create a new undirected graph with them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table32.AddRow(new string[] {
                        "v4"});
#line 277
 testRunner.Then("the incident vertices of the edge \"e2\" should be", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
